<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.AnimationModule</name>
    </assembly>
    <member name="T:UnityEngine.Animation">
      <summary>
        <para>The animation component is used to play back animations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.animateOnlyIfVisible">
      <summary>
        <para>When turned on, Unity might stop animating if it thinks that the results of the animation won't be visible to the user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.animatePhysics">
      <summary>
        <para>When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.clip">
      <summary>
        <para>The default animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.cullingType">
      <summary>
        <para>Controls culling of this Animation component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.isPlaying">
      <summary>
        <para>Is an animation currently being played?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.localBounds">
      <summary>
        <para>AABB of this Animation animation component in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.playAutomatically">
      <summary>
        <para>Should the default animation clip (the Animation.clip property) automatically start playing on startup?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.wrapMode">
      <summary>
        <para>How should time beyond the playback range of the clip be treated?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String)">
      <summary>
        <para>Adds a clip to the animation with name newName.</para>
      </summary>
      <param name="clip"></param>
      <param name="newName"></param>
    </member>
    <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.</para>
      </summary>
      <param name="addLoopFrame">Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.</param>
      <param name="clip"></param>
      <param name="newName"></param>
      <param name="firstFrame"></param>
      <param name="lastFrame"></param>
    </member>
    <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Adds clip to the only play between firstFrame and lastFrame. The new clip will also be added to the animation with name newName.</para>
      </summary>
      <param name="addLoopFrame">Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.</param>
      <param name="clip"></param>
      <param name="newName"></param>
      <param name="firstFrame"></param>
      <param name="lastFrame"></param>
    </member>
    <member name="M:UnityEngine.Animation.Blend(System.String)">
      <summary>
        <para>Blends the animation named animation towards targetWeight over the next time seconds.</para>
      </summary>
      <param name="animation"></param>
      <param name="targetWeight"></param>
      <param name="fadeLength"></param>
    </member>
    <member name="M:UnityEngine.Animation.Blend(System.String,System.Single)">
      <summary>
        <para>Blends the animation named animation towards targetWeight over the next time seconds.</para>
      </summary>
      <param name="animation"></param>
      <param name="targetWeight"></param>
      <param name="fadeLength"></param>
    </member>
    <member name="M:UnityEngine.Animation.Blend(System.String,System.Single,System.Single)">
      <summary>
        <para>Blends the animation named animation towards targetWeight over the next time seconds.</para>
      </summary>
      <param name="animation"></param>
      <param name="targetWeight"></param>
      <param name="fadeLength"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFade(System.String)">
      <summary>
        <para>Fades the animation with name animation in over a period of time seconds and fades other animations out.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFade(System.String,System.Single)">
      <summary>
        <para>Fades the animation with name animation in over a period of time seconds and fades other animations out.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFade(System.String,System.Single,UnityEngine.PlayMode)">
      <summary>
        <para>Fades the animation with name animation in over a period of time seconds and fades other animations out.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single,UnityEngine.QueueMode)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single,UnityEngine.QueueMode,UnityEngine.PlayMode)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="fadeLength"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.GetClipCount">
      <summary>
        <para>Get the number of clips currently assigned to this animation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.IsPlaying(System.String)">
      <summary>
        <para>Is the animation named name playing?</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.Animation.Play()">
      <summary>
        <para>Plays an animation without blending.</para>
      </summary>
      <param name="mode"></param>
      <param name="animation"></param>
    </member>
    <member name="M:UnityEngine.Animation.Play(System.String)">
      <summary>
        <para>Plays an animation without blending.</para>
      </summary>
      <param name="mode"></param>
      <param name="animation"></param>
    </member>
    <member name="M:UnityEngine.Animation.Play(UnityEngine.PlayMode)">
      <summary>
        <para>Plays an animation without blending.</para>
      </summary>
      <param name="mode"></param>
      <param name="animation"></param>
    </member>
    <member name="M:UnityEngine.Animation.Play(System.String,UnityEngine.PlayMode)">
      <summary>
        <para>Plays an animation without blending.</para>
      </summary>
      <param name="mode"></param>
      <param name="animation"></param>
    </member>
    <member name="M:UnityEngine.Animation.PlayQueued(System.String)">
      <summary>
        <para>Plays an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.PlayQueued(System.String,UnityEngine.QueueMode)">
      <summary>
        <para>Plays an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.PlayQueued(System.String,UnityEngine.QueueMode,UnityEngine.PlayMode)">
      <summary>
        <para>Plays an animation after previous animations has finished playing.</para>
      </summary>
      <param name="animation"></param>
      <param name="queue"></param>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Animation.RemoveClip(UnityEngine.AnimationClip)">
      <summary>
        <para>Remove clip from the animation list.</para>
      </summary>
      <param name="clip"></param>
    </member>
    <member name="M:UnityEngine.Animation.RemoveClip(System.String)">
      <summary>
        <para>Remove clip from the animation list.</para>
      </summary>
      <param name="clipName"></param>
    </member>
    <member name="M:UnityEngine.Animation.Rewind(System.String)">
      <summary>
        <para>Rewinds the animation named name.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.Animation.Rewind">
      <summary>
        <para>Rewinds all animations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Sample">
      <summary>
        <para>Samples animations at the current state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Stop">
      <summary>
        <para>Stops all playing animations that were started with this Animation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Stop(System.String)">
      <summary>
        <para>Stops an animation named name.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="P:UnityEngine.Animation.this">
      <summary>
        <para>Returns the animation state named name.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationBlendMode">
      <summary>
        <para>Used by Animation.Play function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationBlendMode.Additive">
      <summary>
        <para>Animations will be added.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationBlendMode.Blend">
      <summary>
        <para>Animations will be blended.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationClip">
      <summary>
        <para>Stores keyframe based animations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.empty">
      <summary>
        <para>Returns true if the animation clip has no curves and no events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.events">
      <summary>
        <para>Animation Events for this animation clip.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.frameRate">
      <summary>
        <para>Frame rate at which keyframes are sampled. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.hasGenericRootTransform">
      <summary>
        <para>Returns true if the Animation has animation on the root transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.hasMotionCurves">
      <summary>
        <para>Returns true if the AnimationClip has root motion curves.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.hasMotionFloatCurves">
      <summary>
        <para>Returns true if the AnimationClip has editor curves for its root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.hasRootCurves">
      <summary>
        <para>Returns true if the AnimationClip has root Curves.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.humanMotion">
      <summary>
        <para>Returns true if the animation contains curve that drives a humanoid rig.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.legacy">
      <summary>
        <para>Set to true if the AnimationClip will be used with the Legacy Animation component ( instead of the Animator ).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.length">
      <summary>
        <para>Animation length in seconds. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.localBounds">
      <summary>
        <para>AABB of this Animation Clip in local space of Animation component that it is attached too.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.wrapMode">
      <summary>
        <para>Sets the default wrap mode used in the animation state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.AddEvent(UnityEngine.AnimationEvent)">
      <summary>
        <para>Adds an animation event to the clip.</para>
      </summary>
      <param name="evt">AnimationEvent to add.</param>
    </member>
    <member name="M:UnityEngine.AnimationClip.ClearCurves">
      <summary>
        <para>Clears all curves from the clip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.#ctor">
      <summary>
        <para>Creates a new animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.EnsureQuaternionContinuity">
      <summary>
        <para>Realigns quaternion keys to ensure shortest interpolation paths.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.SampleAnimation(UnityEngine.GameObject,System.Single)">
      <summary>
        <para>Samples an animation at a given time for any animated properties.</para>
      </summary>
      <param name="go">The animated game object.</param>
      <param name="time">The time to sample an animation.</param>
    </member>
    <member name="M:UnityEngine.AnimationClip.SetCurve(System.String,System.Type,System.String,UnityEngine.AnimationCurve)">
      <summary>
        <para>Assigns the curve to animate a specific property.</para>
      </summary>
      <param name="relativePath">Path to the game object this curve applies to. The relativePath
        is formatted similar to a pathname, e.g. "rootspineleftArm".  If relativePath
        is empty it refers to the game object the animation clip is attached to.</param>
      <param name="type">The class type of the component that is animated.</param>
      <param name="propertyName">The name or path to the property being animated.</param>
      <param name="curve">The animation curve.</param>
    </member>
    <member name="T:UnityEngine.AnimationClipPair">
      <summary>
        <para>This class defines a pair of clips used by AnimatorOverrideController.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationClipPair.originalClip">
      <summary>
        <para>The original clip from the controller.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationClipPair.overrideClip">
      <summary>
        <para>The override animation clip.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationCullingType">
      <summary>
        <para>This enum controlls culling of Animation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationCullingType.AlwaysAnimate">
      <summary>
        <para>Animation culling is disabled - object is animated even when offscreen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationCullingType.BasedOnRenderers">
      <summary>
        <para>Animation is disabled when renderers are not visible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationEvent">
      <summary>
        <para>AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.animationState">
      <summary>
        <para>The animation state that fired this event (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.animatorClipInfo">
      <summary>
        <para>The animator clip info related to this event (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.animatorStateInfo">
      <summary>
        <para>The animator state info related to this event (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.floatParameter">
      <summary>
        <para>Float parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.functionName">
      <summary>
        <para>The name of the function that will be called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.intParameter">
      <summary>
        <para>Int parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.isFiredByAnimator">
      <summary>
        <para>Returns true if this Animation event has been fired by an Animator component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.isFiredByLegacy">
      <summary>
        <para>Returns true if this Animation event has been fired by an Animation component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.messageOptions">
      <summary>
        <para>Function call options.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.objectReferenceParameter">
      <summary>
        <para>Object reference parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.stringParameter">
      <summary>
        <para>String parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.time">
      <summary>
        <para>The time at which the event will be fired off.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationEvent.#ctor">
      <summary>
        <para>Creates a new animation event.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animations.AimConstraint">
      <summary>
        <para>Constrains the orientation of an object relative to the position of one or more source objects, such that the object is facing the average position of the sources.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.aimVector">
      <summary>
        <para>The axis towards which the constrained object orients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.constraintActive">
      <summary>
        <para>Activates or deactivates the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.locked">
      <summary>
        <para>Locks the offset and rotation at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.rotationAtRest">
      <summary>
        <para>The rotation used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.rotationAxis">
      <summary>
        <para>The axes affected by the AimConstraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.rotationOffset">
      <summary>
        <para>Represents an offset from the constrained orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.sourceCount">
      <summary>
        <para>The number of sources set on the component (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.upVector">
      <summary>
        <para>The up vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.worldUpObject">
      <summary>
        <para>The world up object, used to calculate the world up vector when the world up Type is AimConstraint.WorldUpType.ObjectUp or AimConstraint.WorldUpType.ObjectRotationUp.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.worldUpType">
      <summary>
        <para>The type of the world up vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.AimConstraint.worldUpVector">
      <summary>
        <para>The world up Vector used when the world up type is AimConstraint.WorldUpType.Vector or AimConstraint.WorldUpType.ObjectRotationUp.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AimConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Adds a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.AimConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>The source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.AimConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources to be filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.AimConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.AimConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.AimConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="T:UnityEngine.Animations.AimConstraint.WorldUpType">
      <summary>
        <para>Specifies how the world up vector used by the aim constraint is defined.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.AimConstraint.WorldUpType.None">
      <summary>
        <para>Neither defines nor uses a world up vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.AimConstraint.WorldUpType.ObjectRotationUp">
      <summary>
        <para>Uses and defines the world up vector as relative to the local space of the object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.AimConstraint.WorldUpType.ObjectUp">
      <summary>
        <para>Uses and defines the world up vector as a vector from the constrained object, in the direction of the up object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.AimConstraint.WorldUpType.SceneUp">
      <summary>
        <para>Uses and defines the world up vector as the Unity Scene up vector (the Y axis).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.AimConstraint.WorldUpType.Vector">
      <summary>
        <para>Uses and defines the world up vector as a vector specified by the user.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animations.AnimationClipPlayable">
      <summary>
        <para>A Playable that controls an AnimationClip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationClipPlayable.Create(UnityEngine.Playables.PlayableGraph,UnityEngine.AnimationClip)">
      <summary>
        <para>Creates an AnimationClipPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph object that will own the AnimationClipPlayable.</param>
      <param name="clip">The AnimationClip that will be added in the PlayableGraph.</param>
      <returns>
        <para>A AnimationClipPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.AnimationClipPlayable.GetAnimationClip">
      <summary>
        <para>Returns the AnimationClip stored in the AnimationClipPlayable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationClipPlayable.GetApplyFootIK">
      <summary>
        <para>Returns the state of the ApplyFootIK flag.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationClipPlayable.GetApplyPlayableIK">
      <summary>
        <para>Returns the state of the ApplyPlayableIK flag.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationClipPlayable.SetApplyFootIK(System.Boolean)">
      <summary>
        <para>Sets the value of the ApplyFootIK flag.</para>
      </summary>
      <param name="value">The new value of the ApplyFootIK flag.</param>
    </member>
    <member name="M:UnityEngine.Animations.AnimationClipPlayable.SetApplyPlayableIK(System.Boolean)">
      <summary>
        <para>Requests OnAnimatorIK to be called on the animated GameObject.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.Animations.AnimationLayerMixerPlayable">
      <summary>
        <para>An implementation of IPlayable that controls an animation layer mixer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationLayerMixerPlayable.Create(UnityEngine.Playables.PlayableGraph,System.Int32)">
      <summary>
        <para>Creates an AnimationLayerMixerPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph that will contain the new AnimationLayerMixerPlayable.</param>
      <param name="inputCount">The number of layers.</param>
      <returns>
        <para>A new AnimationLayerMixerPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.AnimationLayerMixerPlayable.IsLayerAdditive(System.UInt32)">
      <summary>
        <para>Returns true if the layer is additive, false otherwise.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>True if the layer is additive, false otherwise.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Animations.AnimationLayerMixerPlayable.Null">
      <summary>
        <para>Returns an invalid AnimationLayerMixerPlayable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationLayerMixerPlayable.SetLayerAdditive(System.UInt32,System.Boolean)">
      <summary>
        <para>Specifies whether a layer is additive or not. Additive layers blend with previous layers.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <param name="value">Whether the layer is additive or not. Set to true for an additive blend, or false for a regular blend.</param>
    </member>
    <member name="M:UnityEngine.Animations.AnimationLayerMixerPlayable.SetLayerMaskFromAvatarMask(System.UInt32,UnityEngine.AvatarMask)">
      <summary>
        <para>Sets the mask for the current layer.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <param name="mask">The AvatarMask used to create the new LayerMask.</param>
    </member>
    <member name="T:UnityEngine.Animations.AnimationMixerPlayable">
      <summary>
        <para>An implementation of IPlayable that controls an animation mixer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationMixerPlayable.Create(UnityEngine.Playables.PlayableGraph,System.Int32,System.Boolean)">
      <summary>
        <para>Creates an AnimationMixerPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph that will contain the new AnimationMixerPlayable.</param>
      <param name="inputCount">The number of inputs that the mixer will update.</param>
      <param name="normalizeWeights">True to force a weight normalization of the inputs.</param>
      <returns>
        <para>A new AnimationMixerPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Animations.AnimationMixerPlayable.Null">
      <summary>
        <para>Returns an invalid AnimationMixerPlayable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animations.AnimationPlayableBinding">
      <summary>
        <para>A PlayableBinding that contains information representing an AnimationPlayableOutput.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationPlayableBinding.Create(System.String,UnityEngine.Object)">
      <summary>
        <para>Creates a PlayableBinding that contains information representing an AnimationPlayableOutput.</para>
      </summary>
      <param name="name">The name of the AnimationPlayableOutput.</param>
      <param name="key">A reference to a UnityEngine.Object that acts as a key for this binding.</param>
      <returns>
        <para>Returns a PlayableBinding that contains information that is used to create an AnimationPlayableOutput.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Animations.AnimationPlayableOutput">
      <summary>
        <para>A IPlayableOutput implementation that connects the PlayableGraph to an Animator in the Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimationPlayableOutput.Create(UnityEngine.Playables.PlayableGraph,System.String,UnityEngine.Animator)">
      <summary>
        <para>Creates an AnimationPlayableOutput in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph that will contain the AnimationPlayableOutput.</param>
      <param name="name">The name of the output.</param>
      <param name="target">The Animator that will process the PlayableGraph.</param>
      <returns>
        <para>A new AnimationPlayableOutput attached to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.AnimationPlayableOutput.GetTarget">
      <summary>
        <para>Returns the Animator that plays the animation graph.</para>
      </summary>
      <returns>
        <para>The targeted Animator.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.AnimationPlayableOutput.SetTarget(UnityEngine.Animator)">
      <summary>
        <para>Sets the Animator that plays the animation graph.</para>
      </summary>
      <param name="value">The targeted Animator.</param>
    </member>
    <member name="T:UnityEngine.Animations.AnimatorControllerPlayable">
      <summary>
        <para>An implementation of IPlayable that controls an animation RuntimeAnimatorController.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.AnimatorControllerPlayable.Create(UnityEngine.Playables.PlayableGraph,UnityEngine.RuntimeAnimatorController)">
      <summary>
        <para>Creates an AnimatorControllerPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph object that will own the AnimatorControllerPlayable.</param>
      <param name="controller">The RuntimeAnimatorController that will be added in the graph.</param>
      <returns>
        <para>A AnimatorControllerPlayable.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Animations.AnimatorControllerPlayable.Null">
      <summary>
        <para>Returns an invalid AnimatorControllerPlayable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animations.Axis">
      <summary>
        <para>Represents the axes used in 3D space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.Axis.None">
      <summary>
        <para>Represents the case when no axis is specified.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.Axis.X">
      <summary>
        <para>Represents the X axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.Axis.Y">
      <summary>
        <para>Represents the Y axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Animations.Axis.Z">
      <summary>
        <para>Represents the Z axis.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animations.ConstraintSource">
      <summary>
        <para>Represents a source for the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ConstraintSource.sourceTransform">
      <summary>
        <para>The transform component of the source object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ConstraintSource.weight">
      <summary>
        <para>The weight of the source in the evaluation of the constraint.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Animations.IConstraint">
      <summary>
        <para>The common interface for constraint components.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.IConstraint.constraintActive">
      <summary>
        <para>Activate or deactivate the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.IConstraint.locked">
      <summary>
        <para>Lock or unlock the offset and position at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.IConstraint.sourceCount">
      <summary>
        <para>Gets the number of sources currently set on the component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.IConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.IConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Add a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.IConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>The source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.IConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources to be filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.IConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.IConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.IConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="T:UnityEngine.Animations.LookAtConstraint">
      <summary>
        <para>
                Constrains the orientation of an object relative to the position of one or more source objects, such that the object is facing the average position of the sources.
                The LookAtConstraint is a simplified Animations.AimConstraint typically used with a Camera.
            </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.constraintActive">
      <summary>
        <para>Activates or deactivates the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.locked">
      <summary>
        <para>Locks the offset and rotation at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.roll">
      <summary>
        <para>The rotation angle along the z axis of the object. The constraint uses this property to calculate the world up vector when Animations.LookAtConstraint.UseUpObject is false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.rotationAtRest">
      <summary>
        <para>The rotation used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.rotationOffset">
      <summary>
        <para>Represents an offset from the constrained orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.sourceCount">
      <summary>
        <para>The number of sources set on the component (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.useUpObject">
      <summary>
        <para>Determines how the up vector is calculated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.LookAtConstraint.worldUpObject">
      <summary>
        <para>The world up object, used to calculate the world up vector when Animations.LookAtConstraint.UseUpObject is true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.LookAtConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Adds a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.LookAtConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>Returns the source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.LookAtConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources to be filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.LookAtConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.LookAtConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.LookAtConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="T:UnityEngine.Animations.ParentConstraint">
      <summary>
        <para>Constrains the orientation and translation of an object to one or more source objects. The constrained object behaves as if it is in the hierarchy of the sources.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.constraintActive">
      <summary>
        <para>Activates or deactivates the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.locked">
      <summary>
        <para>Locks the offsets and position (translation and rotation) at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.rotationAtRest">
      <summary>
        <para>The rotation used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.rotationAxis">
      <summary>
        <para>The rotation axes affected by the ParentConstraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.rotationOffsets">
      <summary>
        <para>The rotation offsets from the constrained orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.sourceCount">
      <summary>
        <para>The number of sources set on the component (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.translationAtRest">
      <summary>
        <para>The position of the object in local space, used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.translationAxis">
      <summary>
        <para>The translation axes affected by the ParentConstraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.translationOffsets">
      <summary>
        <para>The translation offsets from the constrained orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ParentConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Adds a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.GetRotationOffset(System.Int32)">
      <summary>
        <para>Gets the rotation offset associated with a source by index.</para>
      </summary>
      <param name="index">The index of the constraint source.</param>
      <returns>
        <para>The rotation offset, as Euler angles.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>The source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.GetTranslationOffset(System.Int32)">
      <summary>
        <para>Gets the rotation offset associated with a source by index.</para>
      </summary>
      <param name="index">The index of the constraint source.</param>
      <returns>
        <para>The translation offset.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.SetRotationOffset(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Sets the rotation offset associated with a source by index.</para>
      </summary>
      <param name="index">The index of the constraint source.</param>
      <param name="value">The new rotation offset.</param>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="M:UnityEngine.Animations.ParentConstraint.SetTranslationOffset(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Sets the translation offset associated with a source by index.</para>
      </summary>
      <param name="index">The index of the constraint source.</param>
      <param name="value">The new translation offset.</param>
    </member>
    <member name="T:UnityEngine.Animations.PositionConstraint">
      <summary>
        <para>Constrains the position of an object relative to the position of one or more source objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.constraintActive">
      <summary>
        <para>Activates or deactivates the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.locked">
      <summary>
        <para>Locks the offset and position at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.sourceCount">
      <summary>
        <para>The number of sources set on the component (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.translationAtRest">
      <summary>
        <para>The translation used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.translationAxis">
      <summary>
        <para>The axes affected by the PositionConstraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.translationOffset">
      <summary>
        <para>The offset from the constrained position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.PositionConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.PositionConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Adds a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.PositionConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>The source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.PositionConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources to be filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.PositionConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.PositionConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.PositionConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="T:UnityEngine.Animations.RotationConstraint">
      <summary>
        <para>Constrains the rotation of an object relative to the rotation of one or more source objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.constraintActive">
      <summary>
        <para>Activates or deactivates the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.locked">
      <summary>
        <para>Locks the offset and rotation at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.rotationAtRest">
      <summary>
        <para>The rotation used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.rotationAxis">
      <summary>
        <para>The axes affected by the RotationConstraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.rotationOffset">
      <summary>
        <para>The offset from the constrained rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.sourceCount">
      <summary>
        <para>The number of sources set on the component (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.RotationConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.RotationConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Adds a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.RotationConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>The source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.RotationConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources to be filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.RotationConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.RotationConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.RotationConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="T:UnityEngine.Animations.ScaleConstraint">
      <summary>
        <para>Constrains the scale of an object relative to the scale of one or more source objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.constraintActive">
      <summary>
        <para>Activates or deactivates the constraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.locked">
      <summary>
        <para>Locks the offset and scale at rest.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.scaleAtRest">
      <summary>
        <para>The scale used when the sources have a total weight of 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.scaleOffset">
      <summary>
        <para>The offset from the constrained scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.scalingAxis">
      <summary>
        <para>The axes affected by the ScaleConstraint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.sourceCount">
      <summary>
        <para>The number of sources set on the component (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animations.ScaleConstraint.weight">
      <summary>
        <para>The weight of the constraint component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animations.ScaleConstraint.AddSource(UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Adds a constraint source.</para>
      </summary>
      <param name="source">The source object and its weight.</param>
      <returns>
        <para>Returns the index of the added source.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.ScaleConstraint.GetSource(System.Int32)">
      <summary>
        <para>Gets a constraint source by index.</para>
      </summary>
      <param name="index">The index of the source.</param>
      <returns>
        <para>The source object and its weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animations.ScaleConstraint.GetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Gets the list of sources.</para>
      </summary>
      <param name="sources">The list of sources to be filled by the component.</param>
    </member>
    <member name="M:UnityEngine.Animations.ScaleConstraint.RemoveSource(System.Int32)">
      <summary>
        <para>Removes a source from the component.</para>
      </summary>
      <param name="index">The index of the source to remove.</param>
    </member>
    <member name="M:UnityEngine.Animations.ScaleConstraint.SetSource(System.Int32,UnityEngine.Animations.ConstraintSource)">
      <summary>
        <para>Sets a source at a specified index.</para>
      </summary>
      <param name="index">The index of the source to set.</param>
      <param name="source">The source object and its weight.</param>
    </member>
    <member name="M:UnityEngine.Animations.ScaleConstraint.SetSources(System.Collections.Generic.List`1&lt;UnityEngine.Animations.ConstraintSource&gt;)">
      <summary>
        <para>Sets the list of sources on the component.</para>
      </summary>
      <param name="sources">The list of sources to set.</param>
    </member>
    <member name="T:UnityEngine.AnimationState">
      <summary>
        <para>The AnimationState gives full control over animation blending.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.blendMode">
      <summary>
        <para>Which blend mode should be used?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.clip">
      <summary>
        <para>The clip that is being played by this animation state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.enabled">
      <summary>
        <para>Enables / disables the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.length">
      <summary>
        <para>The length of the animation clip in seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.name">
      <summary>
        <para>The name of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.normalizedSpeed">
      <summary>
        <para>The normalized playback speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.normalizedTime">
      <summary>
        <para>The normalized time of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.speed">
      <summary>
        <para>The playback speed of the animation. 1 is normal playback speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.time">
      <summary>
        <para>The current time of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.weight">
      <summary>
        <para>The weight of animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.wrapMode">
      <summary>
        <para>Wrapping mode of the animation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationState.AddMixingTransform(UnityEngine.Transform)">
      <summary>
        <para>Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.</para>
      </summary>
      <param name="mix">The transform to animate.</param>
      <param name="recursive">Whether to also animate all children of the specified transform.</param>
    </member>
    <member name="M:UnityEngine.AnimationState.AddMixingTransform(UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.</para>
      </summary>
      <param name="mix">The transform to animate.</param>
      <param name="recursive">Whether to also animate all children of the specified transform.</param>
    </member>
    <member name="M:UnityEngine.AnimationState.RemoveMixingTransform(UnityEngine.Transform)">
      <summary>
        <para>Removes a transform which should be animated.</para>
      </summary>
      <param name="mix"></param>
    </member>
    <member name="T:UnityEngine.Animator">
      <summary>
        <para>Interface to control the Mecanim animation system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.angularVelocity">
      <summary>
        <para>Gets the avatar angular velocity for the last evaluated frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.animatePhysics">
      <summary>
        <para>When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.applyRootMotion">
      <summary>
        <para>Should root motion be applied?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.avatar">
      <summary>
        <para>Gets/Sets the current Avatar.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.bodyPosition">
      <summary>
        <para>The position of the body center of mass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.bodyRotation">
      <summary>
        <para>The rotation of the body center of mass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.cullingMode">
      <summary>
        <para>Controls culling of this Animator component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.deltaPosition">
      <summary>
        <para>Gets the avatar delta position for the last evaluated frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.deltaRotation">
      <summary>
        <para>Gets the avatar delta rotation for the last evaluated frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.feetPivotActive">
      <summary>
        <para>Blends pivot point between body center of mass and feet pivot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.fireEvents">
      <summary>
        <para>Sets whether the Animator sends events of type AnimationEvent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.gravityWeight">
      <summary>
        <para>The current gravity weight based on current animations that are played.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.hasBoundPlayables">
      <summary>
        <para>Returns true if Animator has any playables assigned to it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.hasRootMotion">
      <summary>
        <para>Returns true if the current rig has root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.hasTransformHierarchy">
      <summary>
        <para>Returns true if the object has a transform hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.humanScale">
      <summary>
        <para>Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.isHuman">
      <summary>
        <para>Returns true if the current rig is humanoid, false if it is generic.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.isInitialized">
      <summary>
        <para>Returns whether the animator is initialized successfully.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.isMatchingTarget">
      <summary>
        <para>If automatic matching is active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.isOptimizable">
      <summary>
        <para>Returns true if the current rig is optimizable with AnimatorUtility.OptimizeTransformHierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.keepAnimatorControllerStateOnDisable">
      <summary>
        <para>Controls the behaviour of the Animator component when a GameObject is disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.layerCount">
      <summary>
        <para>Returns the number of layers in the controller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.layersAffectMassCenter">
      <summary>
        <para>Additional layers affects the center of mass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.leftFeetBottomHeight">
      <summary>
        <para>Get left foot bottom height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.linearVelocityBlending">
      <summary>
        <para>When linearVelocityBlending is set to true, the root motion velocity and angular velocity will be blended linearly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.parameterCount">
      <summary>
        <para>Returns the number of parameters in the controller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.parameters">
      <summary>
        <para>The AnimatorControllerParameter list used by the animator. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.pivotPosition">
      <summary>
        <para>Get the current position of the pivot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.pivotWeight">
      <summary>
        <para>Gets the pivot weight.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.playableGraph">
      <summary>
        <para>The PlayableGraph created by the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.playbackTime">
      <summary>
        <para>Sets the playback position in the recording buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.recorderMode">
      <summary>
        <para>Gets the mode of the Animator recorder.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.recorderStartTime">
      <summary>
        <para>Start time of the first frame of the buffer relative to the frame at which StartRecording was called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.recorderStopTime">
      <summary>
        <para>End time of the recorded clip relative to when StartRecording was called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.rightFeetBottomHeight">
      <summary>
        <para>Get right foot bottom height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.rootPosition">
      <summary>
        <para>The root position, the position of the game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.rootRotation">
      <summary>
        <para>The root rotation, the rotation of the game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.runtimeAnimatorController">
      <summary>
        <para>The runtime representation of AnimatorController that controls the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.speed">
      <summary>
        <para>The playback speed of the Animator. 1 is normal playback speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.stabilizeFeet">
      <summary>
        <para>Automatic stabilization of feet during transition and blending.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.targetPosition">
      <summary>
        <para>Returns the position of the target specified by SetTarget.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.targetRotation">
      <summary>
        <para>Returns the rotation of the target specified by SetTarget.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.updateMode">
      <summary>
        <para>Specifies the update mode of the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.velocity">
      <summary>
        <para>Gets the avatar velocity  for the last evaluated frame.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.ApplyBuiltinRootMotion">
      <summary>
        <para>Apply the default Root Motion.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.CrossFade(System.String,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Creates a crossfade from the current state to any other state using normalized times.</para>
      </summary>
      <param name="stateName">The name of the state.</param>
      <param name="stateHashName">The hash name of the state.</param>
      <param name="normalizedTransitionDuration">The duration of the transition (normalized).</param>
      <param name="layer">The layer where the crossfade occurs.</param>
      <param name="normalizedTimeOffset">The time of the state (normalized).</param>
      <param name="normalizedTransitionTime">The time of the transition (normalized).</param>
    </member>
    <member name="M:UnityEngine.Animator.CrossFade(System.Int32,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Creates a crossfade from the current state to any other state using normalized times.</para>
      </summary>
      <param name="stateName">The name of the state.</param>
      <param name="stateHashName">The hash name of the state.</param>
      <param name="normalizedTransitionDuration">The duration of the transition (normalized).</param>
      <param name="layer">The layer where the crossfade occurs.</param>
      <param name="normalizedTimeOffset">The time of the state (normalized).</param>
      <param name="normalizedTransitionTime">The time of the transition (normalized).</param>
    </member>
    <member name="M:UnityEngine.Animator.CrossFadeInFixedTime(System.Int32,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Creates a crossfade from the current state to any other state using times in seconds.</para>
      </summary>
      <param name="stateName">The name of the state.</param>
      <param name="stateHashName">The hash name of the state.</param>
      <param name="fixedTransitionDuration">The duration of the transition (in seconds).</param>
      <param name="layer">The layer where the crossfade occurs.</param>
      <param name="fixedTimeOffset">The time of the state (in seconds).</param>
      <param name="normalizedTransitionTime">The time of the transition (normalized).</param>
    </member>
    <member name="M:UnityEngine.Animator.CrossFadeInFixedTime(System.String,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Creates a crossfade from the current state to any other state using times in seconds.</para>
      </summary>
      <param name="stateName">The name of the state.</param>
      <param name="stateHashName">The hash name of the state.</param>
      <param name="fixedTransitionDuration">The duration of the transition (in seconds).</param>
      <param name="layer">The layer where the crossfade occurs.</param>
      <param name="fixedTimeOffset">The time of the state (in seconds).</param>
      <param name="normalizedTransitionTime">The time of the transition (normalized).</param>
    </member>
    <member name="M:UnityEngine.Animator.GetAnimatorTransitionInfo(System.Int32)">
      <summary>
        <para>Returns an AnimatorTransitionInfo with the informations on the current transition.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
      <returns>
        <para>An AnimatorTransitionInfo with the informations on the current transition.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetBehaviour">
      <summary>
        <para>Returns the first StateMachineBehaviour that matches type T or is derived from T. Returns null if none are found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.GetBehaviours">
      <summary>
        <para>Returns all StateMachineBehaviour that match type T or are derived from T. Returns null if none are found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.GetBoneTransform(UnityEngine.HumanBodyBones)">
      <summary>
        <para>Returns Transform mapped to this human bone id.</para>
      </summary>
      <param name="humanBoneId">The human bone that is queried, see enum HumanBodyBones for a list of possible values.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetBool(System.String)">
      <summary>
        <para>Returns the value of the given boolean parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>The value of the parameter.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetBool(System.Int32)">
      <summary>
        <para>Returns the value of the given boolean parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>The value of the parameter.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetCurrentAnimatorClipInfo(System.Int32)">
      <summary>
        <para>Returns an array of all the AnimatorClipInfo in the current state of the given layer.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>An array of all the AnimatorClipInfo in the current state.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetCurrentAnimatorClipInfo(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.AnimatorClipInfo&gt;)">
      <summary>
        <para>Fills clips with the list of all the AnimatorClipInfo in the current state of the given layer.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <param name="clips">The list of AnimatorClipInfo to fill.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetCurrentAnimatorClipInfoCount(System.Int32)">
      <summary>
        <para>Returns the number of AnimatorClipInfo in the current state.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>The number of AnimatorClipInfo in the current state.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetCurrentAnimatorStateInfo(System.Int32)">
      <summary>
        <para>Returns an AnimatorStateInfo with the information on the current state.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>An AnimatorStateInfo with the information on the current state.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetFloat(System.String)">
      <summary>
        <para>Returns the value of the given float parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>The value of the parameter.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetFloat(System.Int32)">
      <summary>
        <para>Returns the value of the given float parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>The value of the parameter.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetIKHintPosition(UnityEngine.AvatarIKHint)">
      <summary>
        <para>Gets the position of an IK hint.</para>
      </summary>
      <param name="hint">The AvatarIKHint that is queried.</param>
      <returns>
        <para>Return the current position of this IK hint in world space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetIKHintPositionWeight(UnityEngine.AvatarIKHint)">
      <summary>
        <para>Gets the translative weight of an IK Hint (0 = at the original animation before IK, 1 = at the hint).</para>
      </summary>
      <param name="hint">The AvatarIKHint that is queried.</param>
      <returns>
        <para>Return translative weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetIKPosition(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the position of an IK goal.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>Return the current position of this IK goal in world space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetIKPositionWeight(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetIKRotation(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the rotation of an IK goal.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetIKRotationWeight(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetInteger(System.String)">
      <summary>
        <para>Returns the value of the given integer parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>The value of the parameter.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetInteger(System.Int32)">
      <summary>
        <para>Returns the value of the given integer parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>The value of the parameter.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetLayerIndex(System.String)">
      <summary>
        <para>Returns the index of the layer with the given name.</para>
      </summary>
      <param name="layerName">The layer name.</param>
      <returns>
        <para>The layer index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetLayerName(System.Int32)">
      <summary>
        <para>Returns the layer name.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>The layer name.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetLayerWeight(System.Int32)">
      <summary>
        <para>Returns the weight of the layer at the specified index.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>The layer weight.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetNextAnimatorClipInfo(System.Int32)">
      <summary>
        <para>Returns an array of all the AnimatorClipInfo in the next state of the given layer.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>An array of all the AnimatorClipInfo in the next state.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetNextAnimatorClipInfo(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.AnimatorClipInfo&gt;)">
      <summary>
        <para>Fills clips with the list of all the AnimatorClipInfo in the next state of the given layer.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <param name="clips">The list of AnimatorClipInfo to fill.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetNextAnimatorClipInfoCount(System.Int32)">
      <summary>
        <para>Returns the number of AnimatorClipInfo in the next state.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>The number of AnimatorClipInfo in the next state.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetNextAnimatorStateInfo(System.Int32)">
      <summary>
        <para>Returns an AnimatorStateInfo with the information on the next state.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>An AnimatorStateInfo with the information on the next state.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.GetParameter(System.Int32)">
      <summary>
        <para>See AnimatorController.parameters.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Animator.GetQuaternion(System.String)">
      <summary>
        <para>Gets the value of a quaternion parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetQuaternion(System.Int32)">
      <summary>
        <para>Gets the value of a quaternion parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetVector(System.String)">
      <summary>
        <para>Gets the value of a vector parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetVector(System.Int32)">
      <summary>
        <para>Gets the value of a vector parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.HasState(System.Int32,System.Int32)">
      <summary>
        <para>Returns true if the state exists in this layer, false otherwise.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <param name="stateID">The state ID.</param>
      <returns>
        <para>True if the state exists in this layer, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.InterruptMatchTarget">
      <summary>
        <para>Interrupts the automatic target matching.</para>
      </summary>
      <param name="completeMatch"></param>
    </member>
    <member name="M:UnityEngine.Animator.InterruptMatchTarget(System.Boolean)">
      <summary>
        <para>Interrupts the automatic target matching.</para>
      </summary>
      <param name="completeMatch"></param>
    </member>
    <member name="M:UnityEngine.Animator.IsControlled(UnityEngine.Transform)">
      <summary>
        <para>Returns true if the transform is controlled by the Animator\.</para>
      </summary>
      <param name="transform">The transform that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.IsInTransition(System.Int32)">
      <summary>
        <para>Returns true if there is a transition on the given layer, false otherwise.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <returns>
        <para>True if there is a transition on the given layer, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.IsParameterControlledByCurve(System.String)">
      <summary>
        <para>Returns true if the parameter is controlled by a curve, false otherwise.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>True if the parameter is controlled by a curve, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.IsParameterControlledByCurve(System.Int32)">
      <summary>
        <para>Returns true if the parameter is controlled by a curve, false otherwise.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <returns>
        <para>True if the parameter is controlled by a curve, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Animator.MatchTarget(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.AvatarTarget,UnityEngine.MatchTargetWeightMask,System.Single,System.Single)">
      <summary>
        <para>Automatically adjust the GameObject position and rotation.</para>
      </summary>
      <param name="matchPosition">The position we want the body part to reach.</param>
      <param name="matchRotation">The rotation in which we want the body part to be.</param>
      <param name="targetBodyPart">The body part that is involved in the match.</param>
      <param name="weightMask">Structure that contains weights for matching position and rotation.</param>
      <param name="startNormalizedTime">Start time within the animation clip (0 - beginning of clip, 1 - end of clip).</param>
      <param name="targetNormalizedTime">End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop.</param>
    </member>
    <member name="M:UnityEngine.Animator.Play(System.String,System.Int32,System.Single)">
      <summary>
        <para>Plays a state.</para>
      </summary>
      <param name="stateName">The state name.</param>
      <param name="stateNameHash">The state hash name. If stateNameHash is 0, it changes the current state time.</param>
      <param name="layer">The layer index. If layer is -1, it plays the first state with the given state name or hash.</param>
      <param name="normalizedTime">The time offset between zero and one.</param>
    </member>
    <member name="M:UnityEngine.Animator.Play(System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Plays a state.</para>
      </summary>
      <param name="stateName">The state name.</param>
      <param name="stateNameHash">The state hash name. If stateNameHash is 0, it changes the current state time.</param>
      <param name="layer">The layer index. If layer is -1, it plays the first state with the given state name or hash.</param>
      <param name="normalizedTime">The time offset between zero and one.</param>
    </member>
    <member name="M:UnityEngine.Animator.PlayInFixedTime(System.String,System.Int32,System.Single)">
      <summary>
        <para>Plays a state.</para>
      </summary>
      <param name="stateName">The state name.</param>
      <param name="stateNameHash">The state hash name. If stateNameHash is 0, it changes the current state time.</param>
      <param name="layer">The layer index. If layer is -1, it plays the first state with the given state name or hash.</param>
      <param name="fixedTime">The time offset (in seconds).</param>
    </member>
    <member name="M:UnityEngine.Animator.PlayInFixedTime(System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Plays a state.</para>
      </summary>
      <param name="stateName">The state name.</param>
      <param name="stateNameHash">The state hash name. If stateNameHash is 0, it changes the current state time.</param>
      <param name="layer">The layer index. If layer is -1, it plays the first state with the given state name or hash.</param>
      <param name="fixedTime">The time offset (in seconds).</param>
    </member>
    <member name="M:UnityEngine.Animator.Rebind">
      <summary>
        <para>Rebind all the animated properties and mesh data with the Animator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.ResetTrigger(System.String)">
      <summary>
        <para>Resets the value of the given trigger parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
    </member>
    <member name="M:UnityEngine.Animator.ResetTrigger(System.Int32)">
      <summary>
        <para>Resets the value of the given trigger parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetBoneLocalRotation(UnityEngine.HumanBodyBones,UnityEngine.Quaternion)">
      <summary>
        <para>Sets local rotation of a human bone during a IK pass.</para>
      </summary>
      <param name="humanBoneId">The human bone Id.</param>
      <param name="rotation">The local rotation.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Sets the value of the given boolean parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetBool(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the value of the given boolean parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.String,System.Single)">
      <summary>
        <para>Send float values to the Animator to affect transitions.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
      <param name="dampTime">The damper total time.</param>
      <param name="deltaTime">The delta time to give to the damper.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.String,System.Single,System.Single,System.Single)">
      <summary>
        <para>Send float values to the Animator to affect transitions.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
      <param name="dampTime">The damper total time.</param>
      <param name="deltaTime">The delta time to give to the damper.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Send float values to the Animator to affect transitions.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
      <param name="dampTime">The damper total time.</param>
      <param name="deltaTime">The delta time to give to the damper.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.Int32,System.Single,System.Single,System.Single)">
      <summary>
        <para>Send float values to the Animator to affect transitions.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
      <param name="dampTime">The damper total time.</param>
      <param name="deltaTime">The delta time to give to the damper.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKHintPosition(UnityEngine.AvatarIKHint,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of an IK hint.</para>
      </summary>
      <param name="hint">The AvatarIKHint that is set.</param>
      <param name="hintPosition">The position in world space.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKHintPositionWeight(UnityEngine.AvatarIKHint,System.Single)">
      <summary>
        <para>Sets the translative weight of an IK hint (0 = at the original animation before IK, 1 = at the hint).</para>
      </summary>
      <param name="hint">The AvatarIKHint that is set.</param>
      <param name="value">The translative weight.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKPosition(UnityEngine.AvatarIKGoal,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of an IK goal.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="goalPosition">The position in world space.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKPositionWeight(UnityEngine.AvatarIKGoal,System.Single)">
      <summary>
        <para>Sets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="value">The translative weight.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKRotation(UnityEngine.AvatarIKGoal,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of an IK goal.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="goalRotation">The rotation in world space.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKRotationWeight(UnityEngine.AvatarIKGoal,System.Single)">
      <summary>
        <para>Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="value">The rotational weight.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetInteger(System.String,System.Int32)">
      <summary>
        <para>Sets the value of the given integer parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetInteger(System.Int32,System.Int32)">
      <summary>
        <para>Sets the value of the given integer parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
      <param name="value">The new parameter value.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLayerWeight(System.Int32,System.Single)">
      <summary>
        <para>Sets the weight of the layer at the given index.</para>
      </summary>
      <param name="layerIndex">The layer index.</param>
      <param name="weight">The new layer weight.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtPosition(UnityEngine.Vector3)">
      <summary>
        <para>Sets the look at position.</para>
      </summary>
      <param name="lookAtPosition">The position to lookAt.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
      <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
      <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
      <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
      <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
      <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
    </member>
    <member name="M:UnityEngine.Animator.SetQuaternion(System.String,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the value of a quaternion parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetQuaternion(System.Int32,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the value of a quaternion parameter.</para>
      </summary>
      <param name="id">Of the parameter. The id is generated using Animator::StringToHash.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetTarget(UnityEngine.AvatarTarget,System.Single)">
      <summary>
        <para>Sets an AvatarTarget and a targetNormalizedTime for the current state.</para>
      </summary>
      <param name="targetIndex">The avatar body part that is queried.</param>
      <param name="targetNormalizedTime">The current state Time that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetTrigger(System.String)">
      <summary>
        <para>Sets the value of the given trigger parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetTrigger(System.Int32)">
      <summary>
        <para>Sets the value of the given trigger parameter.</para>
      </summary>
      <param name="name">The parameter name.</param>
      <param name="id">The parameter ID.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetVector(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Sets the value of a vector parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetVector(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Sets the value of a vector parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.StartPlayback">
      <summary>
        <para>Sets the animator in playback mode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.StartRecording(System.Int32)">
      <summary>
        <para>Sets the animator in recording mode, and allocates a circular buffer of size frameCount.</para>
      </summary>
      <param name="frameCount">The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls StopRecording. The maximum value for frameCount is 10000.</param>
    </member>
    <member name="M:UnityEngine.Animator.StopPlayback">
      <summary>
        <para>Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.StopRecording">
      <summary>
        <para>Stops animator record mode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.StringToHash(System.String)">
      <summary>
        <para>Generates an parameter id from a string.</para>
      </summary>
      <param name="name">The string to convert to Id.</param>
    </member>
    <member name="M:UnityEngine.Animator.Update(System.Single)">
      <summary>
        <para>Evaluates the animator based on deltaTime.</para>
      </summary>
      <param name="deltaTime">The time delta.</param>
    </member>
    <member name="M:UnityEngine.Animator.WriteDefaultValues">
      <summary>
        <para>Forces a write of the default values stored in the animator.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorClipInfo">
      <summary>
        <para>Information about clip being played and blended by the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorClipInfo.clip">
      <summary>
        <para>Returns the animation clip played by the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorClipInfo.weight">
      <summary>
        <para>Returns the blending weight used by the Animator to blend this clip.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorControllerParameter">
      <summary>
        <para>Used to communicate between scripting and the controller. Some parameters can be set in scripting and used by the controller, while other parameters are based on Custom Curves in Animation Clips and can be sampled using the scripting API.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorControllerParameter.defaultBool">
      <summary>
        <para>The default bool value for the parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorControllerParameter.defaultFloat">
      <summary>
        <para>The default float value for the parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorControllerParameter.defaultInt">
      <summary>
        <para>The default int value for the parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorControllerParameter.name">
      <summary>
        <para>The name of the parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorControllerParameter.nameHash">
      <summary>
        <para>Returns the hash of the parameter based on its name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorControllerParameter.type">
      <summary>
        <para>The type of the parameter.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorControllerParameterType">
      <summary>
        <para>The type of the parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorControllerParameterType.Bool">
      <summary>
        <para>Boolean type parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorControllerParameterType.Float">
      <summary>
        <para>Float type parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorControllerParameterType.Int">
      <summary>
        <para>Int type parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorControllerParameterType.Trigger">
      <summary>
        <para>Trigger type parameter.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorCullingMode">
      <summary>
        <para>Culling mode for the Animator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorCullingMode.AlwaysAnimate">
      <summary>
        <para>Always animate the entire character. Object is animated even when offscreen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorCullingMode.CullCompletely">
      <summary>
        <para>Animation is completely disabled when renderers are not visible.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorCullingMode.CullUpdateTransforms">
      <summary>
        <para>Retarget, IK and write of Transforms are disabled when renderers are not visible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorOverrideController">
      <summary>
        <para>Interface to control Animator Override Controller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorOverrideController.clips">
      <summary>
        <para>Returns the list of orignal Animation Clip from the controller and their override Animation Clip.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorOverrideController.overridesCount">
      <summary>
        <para>Returns the count of overrides.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorOverrideController.runtimeAnimatorController">
      <summary>
        <para>The Runtime Animator Controller that the Animator Override Controller overrides.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorOverrideController.ApplyOverrides(System.Collections.Generic.IList`1&lt;System.Collections.Generic.KeyValuePair`2&lt;UnityEngine.AnimationClip,UnityEngine.AnimationClip&gt;&gt;)">
      <summary>
        <para>Applies the list of overrides on this Animator Override Controller.</para>
      </summary>
      <param name="overrides">Overrides list to apply.</param>
    </member>
    <member name="M:UnityEngine.AnimatorOverrideController.#ctor">
      <summary>
        <para>Creates an empty Animator Override Controller.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorOverrideController.#ctor(UnityEngine.RuntimeAnimatorController)">
      <summary>
        <para>Creates an Animator Override Controller that overrides controller.</para>
      </summary>
      <param name="controller">Runtime Animator Controller to override.</param>
    </member>
    <member name="M:UnityEngine.AnimatorOverrideController.GetOverrides(System.Collections.Generic.List`1&lt;System.Collections.Generic.KeyValuePair`2&lt;UnityEngine.AnimationClip,UnityEngine.AnimationClip&gt;&gt;)">
      <summary>
        <para>Gets the list of Animation Clip overrides currently defined in this Animator Override Controller.</para>
      </summary>
      <param name="overrides">Array to receive results.</param>
    </member>
    <member name="P:UnityEngine.AnimatorOverrideController.this">
      <summary>
        <para>Returns either the overriding Animation Clip if set or the original Animation Clip named name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorOverrideController.this">
      <summary>
        <para>Returns either the overriding Animation Clip if set or the original Animation Clip named name.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorRecorderMode">
      <summary>
        <para>The mode of the Animator's recorder.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorRecorderMode.Offline">
      <summary>
        <para>The Animator recorder is offline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorRecorderMode.Playback">
      <summary>
        <para>The Animator recorder is in Playback.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorRecorderMode.Record">
      <summary>
        <para>The Animator recorder is in Record.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorStateInfo">
      <summary>
        <para>Information about the current or next state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.fullPathHash">
      <summary>
        <para>The full path hash for this state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.length">
      <summary>
        <para>Current duration of the state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.loop">
      <summary>
        <para>Is the state looping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.nameHash">
      <summary>
        <para>The hashed name of the State.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.normalizedTime">
      <summary>
        <para>Normalized time of the State.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.shortNameHash">
      <summary>
        <para>The hash is generated using Animator.StringToHash. The hash does not include the name of the parent layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.speed">
      <summary>
        <para>The playback speed of the animation. 1 is the normal playback speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.speedMultiplier">
      <summary>
        <para>The speed multiplier for this state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.tagHash">
      <summary>
        <para>The Tag of the State.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorStateInfo.IsName(System.String)">
      <summary>
        <para>Does name match the name of the active state in the statemachine?</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.AnimatorStateInfo.IsTag(System.String)">
      <summary>
        <para>Does tag match the tag of the active state in the statemachine.</para>
      </summary>
      <param name="tag"></param>
    </member>
    <member name="T:UnityEngine.AnimatorTransitionInfo">
      <summary>
        <para>Information about the current transition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.anyState">
      <summary>
        <para>Returns true if the transition is from an AnyState node, or from Animator.CrossFade.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.duration">
      <summary>
        <para>Duration of the transition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.durationUnit">
      <summary>
        <para>The unit of the transition duration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.fullPathHash">
      <summary>
        <para>The hash name of the Transition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.nameHash">
      <summary>
        <para>The simplified name of the Transition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.normalizedTime">
      <summary>
        <para>Normalized time of the Transition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.userNameHash">
      <summary>
        <para>The user-specified name of the Transition.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorTransitionInfo.IsName(System.String)">
      <summary>
        <para>Does name match the name of the active Transition.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.AnimatorTransitionInfo.IsUserName(System.String)">
      <summary>
        <para>Does userName match the name of the active Transition.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="T:UnityEngine.AnimatorUpdateMode">
      <summary>
        <para>The update mode of the Animator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorUpdateMode.AnimatePhysics">
      <summary>
        <para>Updates the animator during the physic loop in order to have the animation system synchronized with the physics engine.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorUpdateMode.Normal">
      <summary>
        <para>Normal update of the animator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorUpdateMode.UnscaledTime">
      <summary>
        <para>Animator updates independently of Time.timeScale.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorUtility">
      <summary>
        <para>Various utilities for animator manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorUtility.DeoptimizeTransformHierarchy(UnityEngine.GameObject)">
      <summary>
        <para>This function will recreate all transform hierarchy under GameObject.</para>
      </summary>
      <param name="go">GameObject to Deoptimize.</param>
    </member>
    <member name="M:UnityEngine.AnimatorUtility.OptimizeTransformHierarchy(UnityEngine.GameObject,System.String[])">
      <summary>
        <para>This function will remove all transform hierarchy under GameObject, the animator will write directly transform matrices into the skin mesh matrices saving alot of CPU cycles.</para>
      </summary>
      <param name="go">GameObject to Optimize.</param>
      <param name="exposedTransforms">List of transform name to expose.</param>
    </member>
    <member name="T:UnityEngine.ArmDof">
      <summary>
        <para>Enumeration of all the muscles in an arm.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ArmDownUp">
      <summary>
        <para>The arm down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ArmFrontBack">
      <summary>
        <para>The arm front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ArmRollInOut">
      <summary>
        <para>The arm roll in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ForeArmCloseOpen">
      <summary>
        <para>The forearm close-open muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ForeArmRollInOut">
      <summary>
        <para>The forearm roll in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.HandDownUp">
      <summary>
        <para>The hand down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.HandInOut">
      <summary>
        <para>The hand in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.LastArmDof">
      <summary>
        <para>The last value of the ArmDof enum.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ShoulderDownUp">
      <summary>
        <para>The shoulder down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ArmDof.ShoulderFrontBack">
      <summary>
        <para>The shoulder front-back muscle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Avatar">
      <summary>
        <para>Avatar definition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Avatar.isHuman">
      <summary>
        <para>Return true if this avatar is a valid human avatar.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Avatar.isValid">
      <summary>
        <para>Return true if this avatar is a valid mecanim avatar. It can be a generic avatar or a human avatar.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarBuilder">
      <summary>
        <para>Class to build avatars from user scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AvatarBuilder.BuildGenericAvatar(UnityEngine.GameObject,System.String)">
      <summary>
        <para>Create a new generic avatar.</para>
      </summary>
      <param name="go">Root object of your transform hierarchy.</param>
      <param name="rootMotionTransformName">Transform name of the root motion transform. If empty no root motion is defined and you must take care of avatar movement yourself.</param>
    </member>
    <member name="M:UnityEngine.AvatarBuilder.BuildHumanAvatar(UnityEngine.GameObject,UnityEngine.HumanDescription)">
      <summary>
        <para>Create a humanoid avatar.</para>
      </summary>
      <param name="go">Root object of your transform hierachy. It must be the top most gameobject when you create the avatar.</param>
      <param name="humanDescription">Humanoid description of the avatar.</param>
      <returns>
        <para>Returns the Avatar, you must always always check the avatar is valid before using it with Avatar.isValid.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.AvatarIKGoal">
      <summary>
        <para>IK Goal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.LeftFoot">
      <summary>
        <para>The left foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.LeftHand">
      <summary>
        <para>The left hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.RightFoot">
      <summary>
        <para>The right foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.RightHand">
      <summary>
        <para>The right hand.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarIKHint">
      <summary>
        <para>IK Hint.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKHint.LeftElbow">
      <summary>
        <para>The left elbow IK hint.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKHint.LeftKnee">
      <summary>
        <para>The left knee IK hint.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKHint.RightElbow">
      <summary>
        <para>The right elbow IK hint.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKHint.RightKnee">
      <summary>
        <para>The right knee IK hint.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarMask">
      <summary>
        <para>AvatarMask is used to mask out humanoid body parts and transforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AvatarMask.humanoidBodyPartCount">
      <summary>
        <para>The number of humanoid body parts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AvatarMask.transformCount">
      <summary>
        <para>Number of transforms.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AvatarMask.AddTransformPath(UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Adds a transform path into the AvatarMask.</para>
      </summary>
      <param name="transform">The transform to add into the AvatarMask.</param>
      <param name="recursive">Whether to also add all children of the specified transform.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.#ctor">
      <summary>
        <para>Creates a new AvatarMask.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AvatarMask.GetHumanoidBodyPartActive(UnityEngine.AvatarMaskBodyPart)">
      <summary>
        <para>Returns true if the humanoid body part at the given index is active.</para>
      </summary>
      <param name="index">The index of the humanoid body part.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.GetTransformActive(System.Int32)">
      <summary>
        <para>Returns true if the transform at the given index is active.</para>
      </summary>
      <param name="index">The index of the transform.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.GetTransformPath(System.Int32)">
      <summary>
        <para>Returns the path of the transform at the given index.</para>
      </summary>
      <param name="index">The index of the transform.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.RemoveTransformPath(UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Removes a transform path from the AvatarMask.</para>
      </summary>
      <param name="transform">The Transform that should be removed from the AvatarMask.</param>
      <param name="recursive">Whether to also remove all children of the specified transform.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.SetHumanoidBodyPartActive(UnityEngine.AvatarMaskBodyPart,System.Boolean)">
      <summary>
        <para>Sets the humanoid body part at the given index to active or not.</para>
      </summary>
      <param name="index">The index of the humanoid body part.</param>
      <param name="value">Active or not.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.SetTransformActive(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the tranform at the given index to active or not.</para>
      </summary>
      <param name="index">The index of the transform.</param>
      <param name="value">Active or not.</param>
    </member>
    <member name="M:UnityEngine.AvatarMask.SetTransformPath(System.Int32,System.String)">
      <summary>
        <para>Sets the path of the transform at the given index.</para>
      </summary>
      <param name="index">The index of the transform.</param>
      <param name="path">The path of the transform.</param>
    </member>
    <member name="T:UnityEngine.AvatarMaskBodyPart">
      <summary>
        <para>Avatar body part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.Body">
      <summary>
        <para>The Body.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.Head">
      <summary>
        <para>The Head.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.LastBodyPart">
      <summary>
        <para>Total number of body parts.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.LeftArm">
      <summary>
        <para>The Left Arm.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.LeftFingers">
      <summary>
        <para>Left Fingers.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.LeftFootIK">
      <summary>
        <para>Left Foot IK.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.LeftHandIK">
      <summary>
        <para>Left Hand IK.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.LeftLeg">
      <summary>
        <para>The Left Leg.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.RightArm">
      <summary>
        <para>The Right Arm.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.RightFingers">
      <summary>
        <para>Right Fingers.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.RightFootIK">
      <summary>
        <para>Right Foot IK.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.RightHandIK">
      <summary>
        <para>Right Hand IK.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.RightLeg">
      <summary>
        <para>The Right Leg.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarMaskBodyPart.Root">
      <summary>
        <para>The Root.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarTarget">
      <summary>
        <para>Target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.Body">
      <summary>
        <para>The body, center of mass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.LeftFoot">
      <summary>
        <para>The left foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.LeftHand">
      <summary>
        <para>The left hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.RightFoot">
      <summary>
        <para>The right foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.RightHand">
      <summary>
        <para>The right hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.Root">
      <summary>
        <para>The root, the position of the game object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BodyDof">
      <summary>
        <para>Enumeration of all the muscles in the body.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.ChestFrontBack">
      <summary>
        <para>The chest front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.ChestLeftRight">
      <summary>
        <para>The chest left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.ChestRollLeftRight">
      <summary>
        <para>The chest roll left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.LastBodyDof">
      <summary>
        <para>The last value of the BodyDof enum.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.SpineFrontBack">
      <summary>
        <para>The spine front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.SpineLeftRight">
      <summary>
        <para>The spine left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.SpineRollLeftRight">
      <summary>
        <para>The spine roll left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.UpperChestFrontBack">
      <summary>
        <para>The upper chest front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.UpperChestLeftRight">
      <summary>
        <para>The upper chest left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BodyDof.UpperChestRollLeftRight">
      <summary>
        <para>The upper chest roll left-right muscle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DurationUnit">
      <summary>
        <para>Describe the unit of a duration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DurationUnit.Fixed">
      <summary>
        <para>A fixed duration is a duration expressed in seconds.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DurationUnit.Normalized">
      <summary>
        <para>A normalized duration is a duration expressed in percentage.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.AnimationHumanStream">
      <summary>
        <para>The humanoid stream of animation data passed from one Playable to another.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.bodyLocalPosition">
      <summary>
        <para>The position of the body center of mass relative to the root.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.bodyLocalRotation">
      <summary>
        <para>The rotation of the body center of mass relative to the root.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.bodyPosition">
      <summary>
        <para>The position of the body center of mass in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.bodyRotation">
      <summary>
        <para>The rotation of the body center of mass in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.humanScale">
      <summary>
        <para>The scale of the Avatar. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.isValid">
      <summary>
        <para>Returns true if the stream is valid; false otherwise. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.leftFootHeight">
      <summary>
        <para>The left foot height from the floor. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.leftFootVelocity">
      <summary>
        <para>The left foot velocity from the last evaluated frame. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.rightFootHeight">
      <summary>
        <para>The right foot height from the floor. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationHumanStream.rightFootVelocity">
      <summary>
        <para>The right foot velocity from the last evaluated frame. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalLocalPosition(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the position of this IK goal relative to the root.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The position of this IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalLocalRotation(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the rotation of this IK goal relative to the root.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The rotation of this IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalPosition(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the position of this IK goal in world space.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The position of this IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalPositionFromPose(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the position of this IK goal in world space computed from the stream current pose.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The position of this IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalRotation(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the rotation of this IK goal in world space.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The rotation of this IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalRotationFromPose(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the rotation of this IK goal in world space computed from the stream current pose.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The rotation of this IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalWeightPosition(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the position weight of the IK goal.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The position weight of the IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetGoalWeightRotation(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Returns the rotation weight of the IK goal.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <returns>
        <para>The rotation weight of the IK goal.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetHintPosition(UnityEngine.AvatarIKHint)">
      <summary>
        <para>Returns the position of this IK Hint in world space.</para>
      </summary>
      <param name="index">The AvatarIKHint that is queried.</param>
      <returns>
        <para>The position of this IK Hint.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetHintWeightPosition(UnityEngine.AvatarIKHint)">
      <summary>
        <para>Returns the position weight of the IK Hint.</para>
      </summary>
      <param name="index">The AvatarIKHint that is queried.</param>
      <returns>
        <para>The position weight of the IK Hint.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.GetMuscle(UnityEngine.Experimental.Animations.MuscleHandle)">
      <summary>
        <para>Returns the muscle value.</para>
      </summary>
      <param name="muscle">The Muscle that is queried.</param>
      <returns>
        <para>The muscle value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.ResetToStancePose">
      <summary>
        <para>Reset the current pose to the stance pose (T Pose).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetGoalLocalPosition(UnityEngine.AvatarIKGoal,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of this IK goal relative to the root.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <param name="pos">The position of this IK goal.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetGoalLocalRotation(UnityEngine.AvatarIKGoal,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of this IK goal relative to the root.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <param name="rot">The rotation of this IK goal.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetGoalPosition(UnityEngine.AvatarIKGoal,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of this IK goal in world space.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <param name="pos">The position of this IK goal.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetGoalRotation(UnityEngine.AvatarIKGoal,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of this IK goal in world space.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <param name="rot">The rotation of this IK goal.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetGoalWeightPosition(UnityEngine.AvatarIKGoal,System.Single)">
      <summary>
        <para>Sets the position weight of the IK goal.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <param name="value">The position weight of the IK goal.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetGoalWeightRotation(UnityEngine.AvatarIKGoal,System.Single)">
      <summary>
        <para>Sets the rotation weight of the IK goal.</para>
      </summary>
      <param name="index">The AvatarIKGoal that is queried.</param>
      <param name="value">The rotation weight of the IK goal.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetHintPosition(UnityEngine.AvatarIKHint,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of this IK hint in world space.</para>
      </summary>
      <param name="index">The AvatarIKHint that is queried.</param>
      <param name="pos">The position of this IK hint.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetHintWeightPosition(UnityEngine.AvatarIKHint,System.Single)">
      <summary>
        <para>Sets the position weight of the IK Hint.</para>
      </summary>
      <param name="index">The AvatarIKHint that is queried.</param>
      <param name="value">The position weight of the IK Hint.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetLookAtBodyWeight(System.Single)">
      <summary>
        <para>Sets the LookAt body weight.</para>
      </summary>
      <param name="weight">The LookAt body weight.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetLookAtClampWeight(System.Single)">
      <summary>
        <para>Sets the LookAt clamp weight.</para>
      </summary>
      <param name="weight">The LookAt clamp weight.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetLookAtEyesWeight(System.Single)">
      <summary>
        <para>Sets the LookAt eyes weight.</para>
      </summary>
      <param name="weight">The LookAt eyes weight.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetLookAtHeadWeight(System.Single)">
      <summary>
        <para>Sets the LookAt head weight.</para>
      </summary>
      <param name="weight">The LookAt head weight.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetLookAtPosition(UnityEngine.Vector3)">
      <summary>
        <para>Sets the look at position in world space.</para>
      </summary>
      <param name="lookAtPosition">The look at position.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SetMuscle(UnityEngine.Experimental.Animations.MuscleHandle,System.Single)">
      <summary>
        <para>Sets the muscle value.</para>
      </summary>
      <param name="muscle">The Muscle that is queried.</param>
      <param name="value">The muscle value.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationHumanStream.SolveIK">
      <summary>
        <para>Execute the IK solver.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.AnimationScriptPlayable">
      <summary>
        <para>A Playable that can run a custom, multi-threaded animation job.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationScriptPlayable.Create(UnityEngine.Playables.PlayableGraph,T,System.Int32)">
      <summary>
        <para>Creates an AnimationScriptPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph object that will own the AnimationScriptPlayable.</param>
      <param name="job">The IAnimationJob to execute when processing the playable.</param>
      <param name="inputCount">The number of inputs on the playable.</param>
      <param name="jobData"></param>
      <returns>
        <para>A new AnimationScriptPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationScriptPlayable.GetJobData">
      <summary>
        <para>Gets the job data contained in the playable.</para>
      </summary>
      <returns>
        <para>Returns the IAnimationJob data contained in the playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationScriptPlayable.GetProcessInputs">
      <summary>
        <para>Returns whether the playable inputs will be processed or not.</para>
      </summary>
      <returns>
        <para>true if the inputs will be processed; false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationScriptPlayable.SetJobData(T)">
      <summary>
        <para>Sets a new job data in the playable.</para>
      </summary>
      <param name="jobData">The new IAnimationJob data to set in the playable.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationScriptPlayable.SetProcessInputs(System.Boolean)">
      <summary>
        <para>Sets the new value for processing the inputs or not.</para>
      </summary>
      <param name="value">The new value for processing the inputs or not.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.AnimationStream">
      <summary>
        <para>The stream of animation data passed from one Playable to another.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.angularVelocity">
      <summary>
        <para>Gets or sets the avatar angular velocity for the evaluated frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.deltaTime">
      <summary>
        <para>Gets the delta time for the evaluated frame. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.inputStreamCount">
      <summary>
        <para>Gets the number of input streams. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.isHumanStream">
      <summary>
        <para>Returns true if the stream is from a humanoid avatar; false otherwise. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.isValid">
      <summary>
        <para>Returns true if the stream is valid; false otherwise. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.rootMotionPosition">
      <summary>
        <para>Gets the root motion position for the evaluated frame. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.rootMotionRotation">
      <summary>
        <para>Gets the root motion rotation for the evaluated frame. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.AnimationStream.velocity">
      <summary>
        <para>Gets or sets the avatar velocity for the evaluated frame.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationStream.AsHuman">
      <summary>
        <para>Gets the same stream, but as an AnimationHumanStream.</para>
      </summary>
      <returns>
        <para>Returns the same stream, but as an AnimationHumanStream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimationStream.GetInputStream(System.Int32)">
      <summary>
        <para>Gets the AnimationStream of the playable input at index.</para>
      </summary>
      <param name="index">The input index.</param>
      <returns>
        <para>Returns the AnimationStream of the playable input at index. Returns an invalid stream if the input is not an animation Playable.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.AnimatorJobExtensions">
      <summary>
        <para>Static class providing extension methods for Animator and the animation C# jobs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.BindSceneProperty(UnityEngine.Animator,UnityEngine.Transform,System.Type,System.String)">
      <summary>
        <para>Create a PropertySceneHandle representing the new binding on the Component property of a Transform in the Scene.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="transform">The Transform to target.</param>
      <param name="type">The Component type.</param>
      <param name="property">The property to bind.</param>
      <param name="isObjectReference">isObjectReference need to be set to true if the property to bind does access an Object like SpriteRenderer.sprite.</param>
      <returns>
        <para>The PropertySceneHandle representing the new binding.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.BindSceneProperty(UnityEngine.Animator,UnityEngine.Transform,System.Type,System.String,System.Boolean)">
      <summary>
        <para>Create a PropertySceneHandle representing the new binding on the Component property of a Transform in the Scene.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="transform">The Transform to target.</param>
      <param name="type">The Component type.</param>
      <param name="property">The property to bind.</param>
      <param name="isObjectReference">isObjectReference need to be set to true if the property to bind does access an Object like SpriteRenderer.sprite.</param>
      <returns>
        <para>The PropertySceneHandle representing the new binding.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.BindSceneTransform(UnityEngine.Animator,UnityEngine.Transform)">
      <summary>
        <para>Create a TransformSceneHandle representing the new binding between the Animator and a Transform in the Scene.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="transform">The Transform to bind.</param>
      <returns>
        <para>The TransformSceneHandle representing the new binding.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.BindStreamProperty(UnityEngine.Animator,UnityEngine.Transform,System.Type,System.String)">
      <summary>
        <para>Create a PropertyStreamHandle representing the new binding on the Component property of a Transform already bound to the Animator.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="transform">The Transform to target.</param>
      <param name="type">The Component type.</param>
      <param name="property">The property to bind.</param>
      <param name="isObjectReference">isObjectReference need to be set to true if the property to bind does animate an Object like SpriteRenderer.sprite.</param>
      <returns>
        <para>The PropertyStreamHandle representing the new binding.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.BindStreamProperty(UnityEngine.Animator,UnityEngine.Transform,System.Type,System.String,System.Boolean)">
      <summary>
        <para>Create a PropertyStreamHandle representing the new binding on the Component property of a Transform already bound to the Animator.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="transform">The Transform to target.</param>
      <param name="type">The Component type.</param>
      <param name="property">The property to bind.</param>
      <param name="isObjectReference">isObjectReference need to be set to true if the property to bind does animate an Object like SpriteRenderer.sprite.</param>
      <returns>
        <para>The PropertyStreamHandle representing the new binding.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.BindStreamTransform(UnityEngine.Animator,UnityEngine.Transform)">
      <summary>
        <para>Create a TransformStreamHandle representing the new binding between the Animator and a Transform already bound to the Animator.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="transform">The Transform to bind.</param>
      <returns>
        <para>The TransformStreamHandle representing the new binding.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.CloseAnimationStream(UnityEngine.Animator,UnityEngine.Experimental.Animations.AnimationStream&amp;)">
      <summary>
        <para>Close a stream that has been opened using OpenAnimationStream.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="stream">The stream to close.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.OpenAnimationStream(UnityEngine.Animator,UnityEngine.Experimental.Animations.AnimationStream&amp;)">
      <summary>
        <para>Open a new stream on the Animator.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
      <param name="stream">The new stream.</param>
      <returns>
        <para>Whether or not the stream have been opened.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.ResolveAllSceneHandles(UnityEngine.Animator)">
      <summary>
        <para>Newly created handles are always resolved lazily on the next access when the jobs are run. To avoid a cpu spike while evaluating the jobs you can manually resolve all handles from the main thread.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.AnimatorJobExtensions.ResolveAllStreamHandles(UnityEngine.Animator)">
      <summary>
        <para>Newly created handles are always resolved lazily on the next access when the jobs are run. To avoid a cpu spike while evaluating the jobs you can manually resolve all handles from the main thread.</para>
      </summary>
      <param name="animator">The Animator instance the method is called on.</param>
    </member>
    <member name="?:UnityEngine.Experimental.Animations.IAnimationJob">
      <summary>
        <para>The interface defining an animation job to use with an IAnimationJobPlayable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.IAnimationJob.ProcessAnimation(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Defines what to do when processing the animation.</para>
      </summary>
      <param name="stream">The animation stream to work on.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.IAnimationJob.ProcessRootMotion(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Defines what to do when processing the root motion.</para>
      </summary>
      <param name="stream">The animation stream to work on.</param>
    </member>
    <member name="?:UnityEngine.Experimental.Animations.IAnimationJobPlayable">
      <summary>
        <para>The interface defining an animation playable that uses IAnimationJob.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.IAnimationJobPlayable.GetJobData">
      <summary>
        <para>Gets the job data contained in the playable.</para>
      </summary>
      <returns>
        <para>Returns the IAnimationJob data contained in the playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.IAnimationJobPlayable.SetJobData(T)">
      <summary>
        <para>Sets a new job data in the playable.</para>
      </summary>
      <param name="jobData">The new IAnimationJob data to set in the playable.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.MuscleHandle">
      <summary>
        <para>Handle for a muscle in the AnimationHumanStream.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.MuscleHandle.dof">
      <summary>
        <para>The muscle human sub-part. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.MuscleHandle.humanPartDof">
      <summary>
        <para>The muscle human part. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.MuscleHandle.muscleHandleCount">
      <summary>
        <para>The total number of DoF parts in a humanoid. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Animations.MuscleHandle.name">
      <summary>
        <para>The name of the muscle. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor(UnityEngine.BodyDof)">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor(UnityEngine.HeadDof)">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor(UnityEngine.HumanPartDof,UnityEngine.LegDof)">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor(UnityEngine.HumanPartDof,UnityEngine.ArmDof)">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.#ctor(UnityEngine.HumanPartDof,UnityEngine.FingerDof)">
      <summary>
        <para>The different constructors that creates the muscle handle.</para>
      </summary>
      <param name="bodyDof">The muscle body sub-part.</param>
      <param name="headDof">The muscle head sub-part.</param>
      <param name="partDof">The muscle human part.</param>
      <param name="legDof">The muscle leg sub-part.</param>
      <param name="armDof">The muscle arm sub-part.</param>
      <param name="fingerDof">The muscle finger sub-part.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.MuscleHandle.GetMuscleHandles(UnityEngine.Experimental.Animations.MuscleHandle[])">
      <summary>
        <para>Fills the array with all the possible muscle handles on a humanoid.</para>
      </summary>
      <param name="muscleHandles">An array of MuscleHandle.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.PropertySceneHandle">
      <summary>
        <para>Handle for a Component property on an object in the Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.GetBool(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the boolean property value from an object in the Scene.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <returns>
        <para>The boolean property value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.GetFloat(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the float property value from an object in the Scene.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <returns>
        <para>The float property value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.GetInt(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the integer property value from an object in the Scene.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <returns>
        <para>The integer property value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.IsResolved(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether or not the handle is resolved.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <returns>
        <para>Returns true if the handle is resolved, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.IsValid(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether or not the handle is valid.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <returns>
        <para>Whether or not the handle is valid.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.Resolve(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Resolves the handle.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.SetBool(UnityEngine.Experimental.Animations.AnimationStream,System.Boolean)">
      <summary>
        <para>Sets the boolean property value to an object in the Scene.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <param name="value">The new boolean property value.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.SetFloat(UnityEngine.Experimental.Animations.AnimationStream,System.Single)">
      <summary>
        <para>Sets the float property value to an object in the Scene.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <param name="value">The new float property value.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertySceneHandle.SetInt(UnityEngine.Experimental.Animations.AnimationStream,System.Int32)">
      <summary>
        <para>Sets the integer property value to an object in the Scene.</para>
      </summary>
      <param name="stream">The AnimationStream managing this handle.</param>
      <param name="value">The new integer property value.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.PropertyStreamHandle">
      <summary>
        <para>Handle for a Component property on an object in the AnimationStream.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.GetBool(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the boolean property value from a stream.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <returns>
        <para>The boolean property value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.GetFloat(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the float property value from a stream.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <returns>
        <para>The float property value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.GetInt(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the integer property value from a stream.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <returns>
        <para>The integer property value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.IsResolved(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether or not the handle is resolved.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <returns>
        <para>Returns true if the handle is resolved, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.IsValid(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether or not the handle is valid.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <returns>
        <para>Whether or not the handle is valid.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.Resolve(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Resolves the handle.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.SetBool(UnityEngine.Experimental.Animations.AnimationStream,System.Boolean)">
      <summary>
        <para>Sets the boolean property value into a stream.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <param name="value">The new boolean property value.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.SetFloat(UnityEngine.Experimental.Animations.AnimationStream,System.Single)">
      <summary>
        <para>Sets the float property value into a stream.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <param name="value">The new float property value.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.PropertyStreamHandle.SetInt(UnityEngine.Experimental.Animations.AnimationStream,System.Int32)">
      <summary>
        <para>Sets the integer property value into a stream.</para>
      </summary>
      <param name="stream">The AnimationStream holding the animated values.</param>
      <param name="value">The new integer property value.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.TransformSceneHandle">
      <summary>
        <para>Position, rotation and scale of an object in the Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.GetLocalPosition(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the position of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <returns>
        <para>The position of the transform relative to the parent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.GetLocalRotation(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the rotation of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <returns>
        <para>The rotation of the transform relative to the parent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.GetLocalScale(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the scale of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <returns>
        <para>The scale of the transform relative to the parent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.GetPosition(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the position of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <returns>
        <para>The position of the transform in world space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.GetRotation(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the rotation of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <returns>
        <para>The rotation of the transform in world space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.IsValid(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether this is a valid handle.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <returns>
        <para>Whether this is a valid handle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.SetLocalPosition(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <param name="position">The position of the transform relative to the parent.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.SetLocalRotation(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <param name="rotation">The rotation of the transform relative to the parent.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.SetLocalScale(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Vector3)">
      <summary>
        <para>Sets the scale of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <param name="scale">The scale of the transform relative to the parent.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.SetPosition(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <param name="position">The position of the transform in world space.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformSceneHandle.SetRotation(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that manage this handle.</param>
      <param name="rotation">The rotation of the transform in world space.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Animations.TransformStreamHandle">
      <summary>
        <para>Position, rotation and scale of an object in the AnimationStream.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.GetLocalPosition(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the position of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>The position of the transform relative to the parent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.GetLocalRotation(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the rotation of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>The rotation of the transform relative to the parent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.GetLocalScale(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the scale of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>The scale of the transform relative to the parent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.GetPosition(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the position of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>The position of the transform in world space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.GetRotation(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Gets the rotation of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>The rotation of the transform in world space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.IsResolved(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether this handle is resolved.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>Returns true if the handle is resolved, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.IsValid(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Returns whether this is a valid handle.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <returns>
        <para>Whether this is a valid handle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.Resolve(UnityEngine.Experimental.Animations.AnimationStream)">
      <summary>
        <para>Bind this handle with an animated values from the AnimationStream.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.SetLocalPosition(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <param name="position">The position of the transform relative to the parent.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.SetLocalRotation(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of the transform relative to the parent.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <param name="rotation">The rotation of the transform relative to the parent.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.SetLocalScale(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Vector3)">
      <summary>
        <para>Sets the scale of the transform relative to the parent.</para>
      </summary>
      <param name="scale">The scale of the transform relative to the parent.</param>
      <param name="stream">The AnimationStream that hold the animated values.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.SetPosition(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of the transform in world space.</para>
      </summary>
      <param name="position">The position of the transform in world space.</param>
      <param name="stream">The AnimationStream that hold the animated values.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Animations.TransformStreamHandle.SetRotation(UnityEngine.Experimental.Animations.AnimationStream,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of the transform in world space.</para>
      </summary>
      <param name="stream">The AnimationStream that hold the animated values.</param>
      <param name="rotation">The rotation of the transform in world space.</param>
    </member>
    <member name="T:UnityEngine.FingerDof">
      <summary>
        <para>Enumeration of all the muscles in a finger.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FingerDof.DistalCloseOpen">
      <summary>
        <para>The distal close-open muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FingerDof.IntermediateCloseOpen">
      <summary>
        <para>The intermediate close-open muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FingerDof.LastFingerDof">
      <summary>
        <para>The last value of the FingerDof enum.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FingerDof.ProximalDownUp">
      <summary>
        <para>The proximal down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FingerDof.ProximalInOut">
      <summary>
        <para>The proximal in-out muscle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HeadDof">
      <summary>
        <para>Enumeration of all the muscles in the head.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.HeadFrontBack">
      <summary>
        <para>The head front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.HeadLeftRight">
      <summary>
        <para>The head left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.HeadRollLeftRight">
      <summary>
        <para>The head roll left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.JawDownUp">
      <summary>
        <para>The jaw down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.JawLeftRight">
      <summary>
        <para>The jaw left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.LastHeadDof">
      <summary>
        <para>The last value of the HeadDof enum.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.LeftEyeDownUp">
      <summary>
        <para>The left eye down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.LeftEyeInOut">
      <summary>
        <para>The left eye in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.NeckFrontBack">
      <summary>
        <para>The neck front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.NeckLeftRight">
      <summary>
        <para>The neck left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.NeckRollLeftRight">
      <summary>
        <para>The neck roll left-right muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.RightEyeDownUp">
      <summary>
        <para>The right eye down-up muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeadDof.RightEyeInOut">
      <summary>
        <para>The right eye in-out muscle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanBodyBones">
      <summary>
        <para>Human Body Bones.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Chest">
      <summary>
        <para>This is the Chest bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Head">
      <summary>
        <para>This is the Head bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Hips">
      <summary>
        <para>This is the Hips bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Jaw">
      <summary>
        <para>This is the Jaw bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LastBone">
      <summary>
        <para>This is the Last bone index delimiter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftEye">
      <summary>
        <para>This is the Left Eye bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftFoot">
      <summary>
        <para>This is the Left Ankle bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftHand">
      <summary>
        <para>This is the Left Wrist bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftIndexDistal">
      <summary>
        <para>This is the left index 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftIndexIntermediate">
      <summary>
        <para>This is the left index 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftIndexProximal">
      <summary>
        <para>This is the left index 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLittleDistal">
      <summary>
        <para>This is the left little 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLittleIntermediate">
      <summary>
        <para>This is the left little 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLittleProximal">
      <summary>
        <para>This is the left little 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLowerArm">
      <summary>
        <para>This is the Left Elbow bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLowerLeg">
      <summary>
        <para>This is the Left Knee bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftMiddleDistal">
      <summary>
        <para>This is the left middle 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftMiddleIntermediate">
      <summary>
        <para>This is the left middle 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftMiddleProximal">
      <summary>
        <para>This is the left middle 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftRingDistal">
      <summary>
        <para>This is the left ring 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftRingIntermediate">
      <summary>
        <para>This is the left ring 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftRingProximal">
      <summary>
        <para>This is the left ring 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftShoulder">
      <summary>
        <para>This is the Left Shoulder bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftThumbDistal">
      <summary>
        <para>This is the left thumb 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftThumbIntermediate">
      <summary>
        <para>This is the left thumb 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftThumbProximal">
      <summary>
        <para>This is the left thumb 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftToes">
      <summary>
        <para>This is the Left Toes bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftUpperArm">
      <summary>
        <para>This is the Left Upper Arm bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftUpperLeg">
      <summary>
        <para>This is the Left Upper Leg bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Neck">
      <summary>
        <para>This is the Neck bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightEye">
      <summary>
        <para>This is the Right Eye bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightFoot">
      <summary>
        <para>This is the Right Ankle bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightHand">
      <summary>
        <para>This is the Right Wrist bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightIndexDistal">
      <summary>
        <para>This is the right index 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightIndexIntermediate">
      <summary>
        <para>This is the right index 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightIndexProximal">
      <summary>
        <para>This is the right index 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLittleDistal">
      <summary>
        <para>This is the right little 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLittleIntermediate">
      <summary>
        <para>This is the right little 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLittleProximal">
      <summary>
        <para>This is the right little 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLowerArm">
      <summary>
        <para>This is the Right Elbow bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLowerLeg">
      <summary>
        <para>This is the Right Knee bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightMiddleDistal">
      <summary>
        <para>This is the right middle 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightMiddleIntermediate">
      <summary>
        <para>This is the right middle 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightMiddleProximal">
      <summary>
        <para>This is the right middle 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightRingDistal">
      <summary>
        <para>This is the right ring 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightRingIntermediate">
      <summary>
        <para>This is the right ring 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightRingProximal">
      <summary>
        <para>This is the right ring 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightShoulder">
      <summary>
        <para>This is the Right Shoulder bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightThumbDistal">
      <summary>
        <para>This is the right thumb 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightThumbIntermediate">
      <summary>
        <para>This is the right thumb 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightThumbProximal">
      <summary>
        <para>This is the right thumb 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightToes">
      <summary>
        <para>This is the Right Toes bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightUpperArm">
      <summary>
        <para>This is the Right Upper Arm bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightUpperLeg">
      <summary>
        <para>This is the Right Upper Leg bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Spine">
      <summary>
        <para>This is the first Spine bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.UpperChest">
      <summary>
        <para>This is the Upper Chest bone.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanBone">
      <summary>
        <para>The mapping between a bone in the model and the conceptual bone in the Mecanim human anatomy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanBone.boneName">
      <summary>
        <para>The name of the bone to which the Mecanim human bone is mapped.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanBone.humanName">
      <summary>
        <para>The name of the Mecanim human bone to which the bone from the model is mapped.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBone.limit">
      <summary>
        <para>The rotation limits that define the muscle for this bone.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanDescription">
      <summary>
        <para>Class that holds humanoid avatar parameters to pass to the AvatarBuilder.BuildHumanAvatar function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.armStretch">
      <summary>
        <para>Amount by which the arm's length is allowed to stretch when using IK.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.feetSpacing">
      <summary>
        <para>Modification to the minimum distance between the feet of a humanoid model.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.hasTranslationDoF">
      <summary>
        <para>True for any human that has a translation Degree of Freedom (DoF). It is set to false by default.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanDescription.human">
      <summary>
        <para>Mapping between Mecanim bone names and bone names in the rig.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.legStretch">
      <summary>
        <para>Amount by which the leg's length is allowed to stretch when using IK.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.lowerArmTwist">
      <summary>
        <para>Defines how the lower arm's roll/twisting is distributed between the elbow and wrist joints.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.lowerLegTwist">
      <summary>
        <para>Defines how the lower leg's roll/twisting is distributed between the knee and ankle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanDescription.skeleton">
      <summary>
        <para>List of bone Transforms to include in the model.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.upperArmTwist">
      <summary>
        <para>Defines how the upper arm's roll/twisting is distributed between the shoulder and elbow joints.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.upperLegTwist">
      <summary>
        <para>Defines how the upper leg's roll/twisting is distributed between the thigh and knee joints.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanLimit">
      <summary>
        <para>This class stores the rotation limits that define the muscle for a single human bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.axisLength">
      <summary>
        <para>Length of the bone to which the limit is applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.center">
      <summary>
        <para>The default orientation of a bone when no muscle action is applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.max">
      <summary>
        <para>The maximum rotation away from the initial value that this muscle can apply.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.min">
      <summary>
        <para>The maximum negative rotation away from the initial value that this muscle can apply.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.useDefaultValues">
      <summary>
        <para>Should this limit use the default values?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanPartDof">
      <summary>
        <para>Enumeration of all the parts in a human.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.Body">
      <summary>
        <para>The human body part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.Head">
      <summary>
        <para>The human head part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftArm">
      <summary>
        <para>The human left arm part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftIndex">
      <summary>
        <para>The human left index finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftLeg">
      <summary>
        <para>The human left leg part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftLittle">
      <summary>
        <para>The human left little finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftMiddle">
      <summary>
        <para>The human left middle finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftRing">
      <summary>
        <para>The human left ring finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.LeftThumb">
      <summary>
        <para>The human left thumb finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightArm">
      <summary>
        <para>The human right arm part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightIndex">
      <summary>
        <para>The human right index finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightLeg">
      <summary>
        <para>The human right leg part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightLittle">
      <summary>
        <para>The human right little finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightMiddle">
      <summary>
        <para>The human right middle finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightRing">
      <summary>
        <para>The human right ring finger part.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPartDof.RightThumb">
      <summary>
        <para>The human right thumb finger part.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanPose">
      <summary>
        <para>Retargetable humanoid pose.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPose.bodyPosition">
      <summary>
        <para>The human body position for that pose.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPose.bodyRotation">
      <summary>
        <para>The human body orientation for that pose.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanPose.muscles">
      <summary>
        <para>The array of muscle values for that pose.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanPoseHandler">
      <summary>
        <para>A handler that lets you read or write a HumanPose from or to a humanoid avatar skeleton hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HumanPoseHandler.#ctor(UnityEngine.Avatar,UnityEngine.Transform)">
      <summary>
        <para>Creates a human pose handler from an avatar and a root transform.</para>
      </summary>
      <param name="avatar">The avatar that defines the humanoid rig on skeleton hierarchy with root as the top most parent.</param>
      <param name="root">The top most node of the skeleton hierarchy defined in humanoid avatar.</param>
    </member>
    <member name="M:UnityEngine.HumanPoseHandler.GetHumanPose(UnityEngine.HumanPose&amp;)">
      <summary>
        <para>Gets a human pose from the handled avatar skeleton.</para>
      </summary>
      <param name="humanPose">The output human pose.</param>
    </member>
    <member name="M:UnityEngine.HumanPoseHandler.SetHumanPose(UnityEngine.HumanPose&amp;)">
      <summary>
        <para>Sets a human pose on the handled avatar skeleton.</para>
      </summary>
      <param name="humanPose">The human pose to be set.</param>
    </member>
    <member name="T:UnityEngine.HumanTrait">
      <summary>
        <para>Details of all the human bone and muscle types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanTrait.BoneCount">
      <summary>
        <para>The number of human bone types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HumanTrait.BoneFromMuscle(System.Int32)">
      <summary>
        <para>Return the bone to which a particular muscle is connected.</para>
      </summary>
      <param name="i">Muscle index.</param>
    </member>
    <member name="P:UnityEngine.HumanTrait.BoneName">
      <summary>
        <para>Array of the names of all human bone types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HumanTrait.GetBoneDefaultHierarchyMass(System.Int32)">
      <summary>
        <para>Gets the bone hierarchy mass.</para>
      </summary>
      <param name="i">The humanoid bone index.</param>
      <returns>
        <para>The bone hierarchy mass.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.HumanTrait.GetMuscleDefaultMax(System.Int32)">
      <summary>
        <para>Get the default maximum value of rotation for a muscle in degrees.</para>
      </summary>
      <param name="i">Muscle index.</param>
    </member>
    <member name="M:UnityEngine.HumanTrait.GetMuscleDefaultMin(System.Int32)">
      <summary>
        <para>Get the default minimum value of rotation for a muscle in degrees.</para>
      </summary>
      <param name="i">Muscle index.</param>
    </member>
    <member name="M:UnityEngine.HumanTrait.GetParentBone(System.Int32)">
      <summary>
        <para>Returns parent humanoid bone index of a bone.</para>
      </summary>
      <param name="i">Humanoid bone index to get parent from.</param>
      <returns>
        <para>Humanoid bone index of parent.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.HumanTrait.MuscleCount">
      <summary>
        <para>The number of human muscle types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HumanTrait.MuscleFromBone(System.Int32,System.Int32)">
      <summary>
        <para>Obtain the muscle index for a particular bone index and "degree of freedom".</para>
      </summary>
      <param name="i">Bone index.</param>
      <param name="dofIndex">Number representing a "degree of freedom": 0 for X-Axis, 1 for Y-Axis, 2 for Z-Axis.</param>
    </member>
    <member name="P:UnityEngine.HumanTrait.MuscleName">
      <summary>
        <para>Array of the names of all human muscle types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HumanTrait.RequiredBone(System.Int32)">
      <summary>
        <para>Is the bone a member of the minimal set of bones that Mecanim requires for a human model?</para>
      </summary>
      <param name="i">Index of the bone to test.</param>
    </member>
    <member name="P:UnityEngine.HumanTrait.RequiredBoneCount">
      <summary>
        <para>The number of bone types that are required by Mecanim for any human model.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.IAnimationClipSource">
      <summary>
        <para>Use this interface to have a class provide its own list of Animation Clips to the Animation Window.  The class must inherit from MonoBehaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.IAnimationClipSource.GetAnimationClips(System.Collections.Generic.List`1&lt;UnityEngine.AnimationClip&gt;)">
      <summary>
        <para>Returns a list of Animation Clips.</para>
      </summary>
      <param name="results"></param>
    </member>
    <member name="T:UnityEngine.LegDof">
      <summary>
        <para>Enumeration of all the muscles in a leg.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.FootCloseOpen">
      <summary>
        <para>The foot close-open muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.FootInOut">
      <summary>
        <para>The foot in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.LastLegDof">
      <summary>
        <para>The last value of the LegDof enum.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.LegCloseOpen">
      <summary>
        <para>The leg close-open muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.LegRollInOut">
      <summary>
        <para>The leg roll in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.ToesUpDown">
      <summary>
        <para>The toes up-down muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.UpperLegFrontBack">
      <summary>
        <para>The upper leg front-back muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.UpperLegInOut">
      <summary>
        <para>The upper leg in-out muscle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LegDof.UpperLegRollInOut">
      <summary>
        <para>The upper leg roll in-out muscle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MatchTargetWeightMask">
      <summary>
        <para>Use this struct to specify the position and rotation weight mask for Animator.MatchTarget.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MatchTargetWeightMask.positionXYZWeight">
      <summary>
        <para>Position XYZ weight.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MatchTargetWeightMask.rotationWeight">
      <summary>
        <para>Rotation weight.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MatchTargetWeightMask.#ctor(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>MatchTargetWeightMask contructor.</para>
      </summary>
      <param name="positionXYZWeight">Position XYZ weight.</param>
      <param name="rotationWeight">Rotation weight.</param>
    </member>
    <member name="T:UnityEngine.Motion">
      <summary>
        <para>Base class for AnimationClips and BlendTrees.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.AnimationPlayableUtilities">
      <summary>
        <para>Implements high-level utility methods to simplify use of the Playable API with Animations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.AnimationPlayableUtilities.Play(UnityEngine.Animator,UnityEngine.Playables.Playable,UnityEngine.Playables.PlayableGraph)">
      <summary>
        <para>Plays the Playable on  the given Animator.</para>
      </summary>
      <param name="animator">Target Animator.</param>
      <param name="playable">The Playable that will be played.</param>
      <param name="graph">The Graph that owns the Playable.</param>
    </member>
    <member name="M:UnityEngine.Playables.AnimationPlayableUtilities.PlayAnimatorController(UnityEngine.Animator,UnityEngine.RuntimeAnimatorController,UnityEngine.Playables.PlayableGraph&amp;)">
      <summary>
        <para>Creates a PlayableGraph to be played on the given Animator. An AnimatorControllerPlayable is also created for the given RuntimeAnimatorController.</para>
      </summary>
      <param name="animator">Target Animator.</param>
      <param name="controller">The RuntimeAnimatorController to create an AnimatorControllerPlayable for.</param>
      <param name="graph">The created PlayableGraph.</param>
      <returns>
        <para>A handle to the newly-created AnimatorControllerPlayable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.AnimationPlayableUtilities.PlayClip(UnityEngine.Animator,UnityEngine.AnimationClip,UnityEngine.Playables.PlayableGraph&amp;)">
      <summary>
        <para>Creates a PlayableGraph to be played on the given Animator. An AnimationClipPlayable is also created for the given AnimationClip.</para>
      </summary>
      <param name="animator">Target Animator.</param>
      <param name="clip">The AnimationClip to create an AnimationClipPlayable for.</param>
      <param name="graph">The created PlayableGraph.</param>
      <returns>
        <para>A handle to the newly-created AnimationClipPlayable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.AnimationPlayableUtilities.PlayLayerMixer(UnityEngine.Animator,System.Int32,UnityEngine.Playables.PlayableGraph&amp;)">
      <summary>
        <para>Creates a PlayableGraph to be played on the given Animator. An AnimationLayerMixerPlayable is also created.</para>
      </summary>
      <param name="animator">Target Animator.</param>
      <param name="inputCount">The input count for the AnimationLayerMixerPlayable. Defines the number of layers.</param>
      <param name="graph">The created PlayableGraph.</param>
      <returns>
        <para>A handle to the newly-created AnimationLayerMixerPlayable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.AnimationPlayableUtilities.PlayMixer(UnityEngine.Animator,System.Int32,UnityEngine.Playables.PlayableGraph&amp;)">
      <summary>
        <para>Creates a PlayableGraph to be played on the given Animator. An AnimationMixerPlayable is also created.</para>
      </summary>
      <param name="animator">Target Animator.</param>
      <param name="inputCount">The input count for the AnimationMixerPlayable.</param>
      <param name="graph">The created PlayableGraph.</param>
      <returns>
        <para>A handle to the newly-created AnimationMixerPlayable.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.PlayMode">
      <summary>
        <para>Used by Animation.Play function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PlayMode.StopAll">
      <summary>
        <para>Will stop all animations that were started with this component before playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PlayMode.StopSameLayer">
      <summary>
        <para>Will stop all animations that were started in the same layer. This is the default when playing animations.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.QueueMode">
      <summary>
        <para>Used by Animation.Play function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.QueueMode.CompleteOthers">
      <summary>
        <para>Will start playing after all other animations have stopped playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.QueueMode.PlayNow">
      <summary>
        <para>Starts playing immediately. This can be used if you just want to quickly create a duplicate animation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RuntimeAnimatorController">
      <summary>
        <para>The runtime representation of the AnimatorController. Use this representation to change the Animator Controller during runtime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RuntimeAnimatorController.animationClips">
      <summary>
        <para>Retrieves all AnimationClip used by the controller.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SharedBetweenAnimatorsAttribute">
      <summary>
        <para>SharedBetweenAnimatorsAttribute is an attribute that specify that this StateMachineBehaviour should be instantiate only once and shared among all Animator instance. This attribute reduce the memory footprint for each controller instance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SkeletonBone">
      <summary>
        <para>Details of the Transform name mapped to the skeleton bone of a model and its default position and rotation in the T-pose.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.name">
      <summary>
        <para>The name of the Transform mapped to the bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.position">
      <summary>
        <para>The T-pose position of the bone in local space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.rotation">
      <summary>
        <para>The T-pose rotation of the bone in local space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.scale">
      <summary>
        <para>The T-pose scaling of the bone in local space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.StateMachineBehaviour">
      <summary>
        <para>StateMachineBehaviour is a component that can be added to a state machine state. It's the base class every script on a state derives from.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateEnter">
      <summary>
        <para>Called on the first Update frame when a state machine evaluate this state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateExit">
      <summary>
        <para>Called on the last update frame when a state machine evaluate this state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateIK">
      <summary>
        <para>Called right after MonoBehaviour.OnAnimatorIK.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateMachineEnter(UnityEngine.Animator,System.Int32)">
      <summary>
        <para>Called on the first Update frame when making a transition to a state machine. This is not called when making a transition into a state machine sub-state.</para>
      </summary>
      <param name="animator">The Animator playing this state machine.</param>
      <param name="stateMachinePathHash">The full path hash for this state machine.</param>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateMachineExit(UnityEngine.Animator,System.Int32)">
      <summary>
        <para>Called on the last Update frame when making a transition out of a StateMachine. This is not called when making a transition into a StateMachine sub-state.</para>
      </summary>
      <param name="animator">The Animator playing this state machine.</param>
      <param name="stateMachinePathHash">The full path hash for this state machine.</param>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateMove">
      <summary>
        <para>Called right after MonoBehaviour.OnAnimatorMove.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StateMachineBehaviour.OnStateUpdate">
      <summary>
        <para>Called at each Update frame except for the first and last frame.</para>
      </summary>
    </member>
    <member name="A:UnityEngine.AnimationModule">
      <summary>
        <para>The Animation module implements Unity's animation system.</para>
      </summary>
    </member>
  </members>
</doc>

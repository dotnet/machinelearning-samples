// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Common;

namespace LandUse_Console
{
    public partial class LandUse
    {
        /// <summary>
        /// model input class for LandUse.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Label")]
            public string Label { get; set; }

            [ColumnName(@"ImageSource")]
            public string ImageSource { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for LandUse.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("output1")]
            public float[] Output1 { get; set; }

            public string[] ClassificationLabels = new string[] { "AnnualCrop", "Forest", "HerbaceousVegetation", "Highway", "Industrial", "Pasture", "PermanentCrop", "Residential", "River", "SeaLake", };

            public string Prediction
            {
                get
                {
                    var maxScore = this.Score.Max();
                    var maxIndex = Array.IndexOf(this.Score, maxScore);
                    return this.ClassificationLabels[maxIndex];
                }
            }

            public float[] Score
            {
                get
                {
                    var exp = this.Output1.Select(x => (float)Math.Exp(x));
                    var exp_sum = exp.Sum();
                    return exp.Select(x => x / exp_sum).ToArray();
                }
            }
        }


        #endregion

        private static string MLNetModelPath = Path.GetFullPath(
            Path.Combine("..\\..\\..\\..\\LandUse", "LandUse.zip"));
        private static string OnnxModelPath = Path.GetFullPath(
            Path.Combine("..\\..\\..\\..\\LandUse", "LandUse.onnx"));
        private static string AssetsPath = Path.GetFullPath(
            Path.Combine("..\\..\\..\\..\\", "LandUsePhotosSet.zip")); // "assets.zip"

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();

            if (!File.Exists(MLNetModelPath))
            {
                var graphZip = "LandUse.zip";
                var graphUrl = "https://bit.ly/3qCkgLn";
                var commonGraphsRelativePath = @"../../../../../../../graphs";
                var commonGraphsPath = GetAbsolutePath(commonGraphsRelativePath);
                var modelFileFolder = Path.GetDirectoryName(MLNetModelPath);
                Web.DownloadBigFile(modelFileFolder, graphUrl, graphZip, commonGraphsPath,  
                    doNotUnzip:true);
            }
            
            // Not required: onnx model yet included in LandUse.zip
            //if (!File.Exists(OnnxModelPath))
            //{
            //    var graphOnnx = "LandUse.onnx";
            //    var graphUrl = "https://bit.ly/3JEUayT";
            //    var commonGraphsRelativePath = @"../../../../../../../graphs";
            //    var commonGraphsPath = GetAbsolutePath(commonGraphsRelativePath);
            //    var modelFileFolder = Path.GetDirectoryName(OnnxModelPath);
            //    Web.DownloadBigFile(modelFileFolder, graphUrl, graphOnnx, commonGraphsPath);
            //}

            // Required?
            if (!File.Exists(AssetsPath))
            {
                var datasetZip = "LandUsePhotosSet.zip";
                var datasetUrl = "https://bit.ly/384T15P";
                var commonDatasetsRelativePath = @"../../../../../../../datasets";
                var commonDatasets = GetAbsolutePath(commonDatasetsRelativePath);
                var datasetFolder = Path.GetDirectoryName(AssetsPath);
                Web.DownloadBigFile(datasetFolder, datasetUrl, datasetZip, commonDatasets,
                    doNotUnzip: true);
            }

            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        private static string GetAbsolutePath(string relativePath)
        {
            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);
            string assemblyFolderPath = _dataRoot.Directory.FullName;

            string fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }
    }
}
